<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一起来实现es5中新增的数组方法]]></title>
      <url>https://qianlongo.github.io/2016/10/22/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AE%9E%E7%8E%B0es5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>一直以来想写一篇关于es5中新增数组的使用方法与源码实现的文章，拖了挺久了，趁着这夜深人静，大脑清醒，又困意不在的时刻写下来。也许有人会问，现如今es6都大行其道了，还学es5是不是有些过时了，😄，温故而知新，可以为师矣，而且我们是要自己实现这些方法嘛，知其然还要知其所以然，不光要会用，还要知道为什么是这样用哒。</p>
</blockquote>
<p><img src="http://odssgnnpf.bkt.clouddn.com/43d555c6434bc10db279724d5aa66dc8.jpg" alt="前端配图"></p>
<a id="more"></a>
<h2 id="新增方法预览"><a href="#新增方法预览" class="headerlink" title="新增方法预览"></a>新增方法预览</h2><blockquote>
<p>es5中给js的数组增添了许多实用的方法，利用这些方法可以帮助我们更加快速方便的写js代码，然后蛋疼的是低版本ie肯定是不支持的，所以………………自己动手丰衣足食。让我们一步步看下如何使用与实现这些方法。</p>
</blockquote>
<ol>
<li>forEach </li>
<li>map </li>
<li>filter </li>
<li>some </li>
<li>every </li>
<li>indexOf </li>
<li>lastIndexOf </li>
<li>reduce </li>
<li>reduceRight </li>
</ol>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><blockquote>
<p>这个方法作用是啥咧，就是循环，遍历。比如一般我们在for循环做这样的事的时候如下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i], i, arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果用forEach我们应该如何做呢？</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e, i, array)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>是不是觉得不用写for循环了，瞬间逼格都高了</strong></p>
<blockquote>
<p>forEach函数中的回调函数支持三个参数，<code>1、数组的值</code>，<code>2、值的索引</code>，<code>3、数组本身</code>。这样的调用方式是不是和jQuery中的$.each很像？ 其实不然，jQuery和forEach回调函数的第一个和第二个参数正好是反着来的。</p>
</blockquote>
<p><strong>看看对比</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="comment">// forEach</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e, i, array);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"></div><div class="line"><span class="number">1</span> <span class="number">0</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="number">2</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="number">3</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="number">4</span> <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="number">5</span> <span class="number">4</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// $.each</span></div><div class="line">$.each(arr, <span class="function"><span class="keyword">function</span> (<span class="params">i, e, array</span>) </span>&#123; <span class="comment">// 测试的时候发现array是undefined,查了文档也发现没有第三个参数</span></div><div class="line">  <span class="built_in">console</span>.log(i, e, array);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"></div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="literal">undefined</span></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="literal">undefined</span></div><div class="line"><span class="number">2</span> <span class="number">3</span> <span class="literal">undefined</span></div><div class="line"><span class="number">3</span> <span class="number">4</span> <span class="literal">undefined</span></div><div class="line"><span class="number">4</span> <span class="number">5</span> <span class="literal">undefined</span></div></pre></td></tr></table></figure>
<p><strong>接着我们来看一下forEach的第二个参数，这个参数决定第一个回调函数的内部this指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="comment">//  默认情况下，第二个参数不传入时</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e, i, array, <span class="keyword">this</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"><span class="number">1</span> <span class="number">0</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="built_in">window</span> </div><div class="line"><span class="number">2</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="built_in">window</span> </div><div class="line"><span class="number">3</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="built_in">window</span> </div><div class="line"><span class="number">4</span> <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="built_in">window</span> </div><div class="line"><span class="number">5</span> <span class="number">4</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="built_in">window</span> </div><div class="line"></div><div class="line"><span class="comment">// 传入参数</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e, i, array, <span class="keyword">this</span>);</div><div class="line">&#125;, &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"><span class="number">1</span> <span class="number">0</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125; </div><div class="line"><span class="number">2</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125; </div><div class="line"><span class="number">3</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125; </div><div class="line"><span class="number">4</span> <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125; </div><div class="line"><span class="number">5</span> <span class="number">4</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#123;<span class="attr">name</span>: <span class="string">'qianlong'</span>&#125;</div></pre></td></tr></table></figure>
<p><strong>最后接下来我们自己实现一下这个方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeArray = ObjPro.forEach;</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.forEach = nativeArray || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, ctx</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (hasOwn.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">      callBack.call(ctx, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote>
<p>map是干嘛的！ 其最主要的作用就是将原数组按照一定的规则映射成一个新的数组。再将其返回，<code>注意是返回一个新的数组，而不是将原数组直接改变</code>使用方式和forEach类似,也是接受一个回调函数，一个改变内部this指向的对象。</p>
</blockquote>
<p><strong>map</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.map(callback,[ thisObject])</div></pre></td></tr></table></figure>
<p><strong>callback</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</div><div class="line">  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>举个栗子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'hello '</span> +  e;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"></div><div class="line">[<span class="string">"hello 1"</span>, <span class="string">"hello 2"</span>, <span class="string">"hello 3"</span>, <span class="string">"hello 4"</span>, <span class="string">"hello 5"</span>] <span class="comment">// newArr</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// arr</span></div></pre></td></tr></table></figure>
<p><strong>注意上面的return，如果我们不写return会怎样呢？</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="string">'hello '</span> +  e;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"></div><div class="line">[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">// newArr</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// arr</span></div></pre></td></tr></table></figure>
<p>这一堆的undefined是啥情况，还记得一个函数执行完，如果没有显示的返回值，会返回什么吗？ <strong>没错</strong> 就是<code>undefined</code>，这就是原因所在，等会通过源码，你就会更加明白。</p>
<p><strong>最后我们自己实现一下map这个方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeMap = ObjPro.map;</div><div class="line">    </div><div class="line"><span class="built_in">Array</span>.prototype.map = nativeMap || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> returnArr = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    returnArr.push(callBack.call(ctx, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)); <span class="comment">// 这就是为什么回调函数没有返回值的情况下会得到一堆的undefined值，他将回调函数的返回值push到了一个数组里面，当你没有显示的返回值的时候，自然push进去的就是undefined了     </span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>  returnArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote>
<p>接下来是<code>filter</code>,筛选，过滤的意思，给你一个数组，用一些你制定的条件，对其中的值进行过滤，最后得到你想要的新的数组。基本用法和map差不多</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">array.filter(callback,[ thisObject]);</div><div class="line"></div><div class="line"><span class="string">``</span><span class="string">`	</span></div><div class="line"></div><div class="line">但是和map也有差别的地方，filter需要你在callback处返回弱等于`<span class="literal">true</span><span class="string">` 的值,才会将原数组中筛选出的值返回给你。</span></div><div class="line"></div><div class="line">**举个栗子**</div><div class="line"></div><div class="line">`<span class="string">``</span> javascript</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> e;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// output</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// newArr</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr2 = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (e &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>; </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// ouput</span></div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// newArr2</span></div></pre></td></tr></table></figure>
<p><strong>当然最后还有第二个参数改变内部this指向的参数可选，默认是window对象，你也可以传一个对象进去, 最后我们自己来实现一下这个api</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeFilter = ObjPro.filter;</div><div class="line">    </div><div class="line"><span class="built_in">Array</span>.prototype.filter = nativeFilter || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> returnArr = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (callBack.call(ctx, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</div><div class="line">      returnArr.push(<span class="keyword">this</span>[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;	</div><div class="line">  <span class="keyword">return</span> returnArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="some-vs-every"><a href="#some-vs-every" class="headerlink" title="some vs every"></a>some vs every</h2><blockquote>
<p>some与接下里的every正好相对，<code>some</code>是只要数组中的某个值，符合你给定的判断条件就返回true，而<code>every</code>则是数组中的所有值都符合你给定的判断条件的时候才会返回true，否则就返回false,也就是说两个方法最后得到的都是true or false</p>
</blockquote>
<p><strong>举个栗子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (e === <span class="number">3</span>) &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// output  	</span></div><div class="line"><span class="literal">true</span> <span class="comment">// result;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result2 = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">e, i, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (e &gt; <span class="number">3</span>) &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// output  	</span></div><div class="line"><span class="literal">false</span> <span class="comment">// result;</span></div></pre></td></tr></table></figure>
<p><code>some 和 every使用起来非常简单，接下来我们自己实现一把</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeSome = ObjPro.some,</div><div class="line">    nativeEvery = ObjPro.every;</div><div class="line">    </div><div class="line"><span class="comment">// some    </span></div><div class="line"><span class="built_in">Array</span>.prototype.some = nativeSome || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> resultValue = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (resultValue) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    resultValue = !!callBack.call(ctx, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>); </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>  resultValue;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// every</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.every = nativeEvery || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> resultValue = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!resultValue) &#123;</div><div class="line">      <span class="keyword">break</span>;	</div><div class="line">    &#125;</div><div class="line">    resultValue = !!callBack.call(ctx, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">  &#125;	</div><div class="line">  <span class="keyword">return</span> resultValue;  	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><blockquote>
<p>数组的indexOf方法和字符串的indexOf用法非常类似，<code>array.indexOf(searchElement[, fromIndex])</code>,针对给定的要查找的值，和开始查找的位置(可选)，返回整数索引值。</p>
</blockquote>
<p><strong>举个例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line">arr.indexOf(<span class="number">1</span>) <span class="comment">// 1</span></div><div class="line">arr.indexOf(<span class="number">3</span>, <span class="string">'qianlong'</span>) <span class="comment">// 3 因为给定的开始索引值不能转化成数字，所以还是从0位置开始搜索 </span></div><div class="line">arr.indexOf(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// -1</span></div><div class="line">arr.indexOf(<span class="number">3</span>, <span class="string">'4'</span>) <span class="comment">// -1</span></div><div class="line">arr.indexOf(<span class="string">'3'</span>) <span class="comment">// -1 // 判断条件是强 3 !== '3' =&gt; -1</span></div></pre></td></tr></table></figure>
<p><strong>实现代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeIndexOf = ObjPro.indexOf;</div><div class="line">    </div><div class="line"><span class="built_in">Array</span>.prototype.indexOf = nativeIndexOf || <span class="function"><span class="keyword">function</span> (<span class="params">searchElement, fromIndex</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> returnIndex = <span class="number">-1</span>,</div><div class="line">      fromIndex = fromIndex * <span class="number">1</span> || <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = fromIndex, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (searchElement === <span class="keyword">this</span>[i]) &#123;</div><div class="line">	   returnIndex = i;</div><div class="line">	   <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;     		</div><div class="line">  <span class="keyword">return</span> returnIndex;    	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><blockquote>
<p>数组的lastIndexOf方法和字符串的lastIndexOf用法非常类似，<code>array. lastIndexOf(searchElement[, fromIndex])</code>,针对给定的要查找的值，和开始查找的位置(可选)，返回整数索引值。与indexOf不同的地方在于，它是从后往前查找。默认开始查找的位置是 <code>array.length - 1</code></p>
</blockquote>
<p><strong>举个栗子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>];</div><div class="line"></div><div class="line">arr.lastIndexOf(<span class="number">1</span>) <span class="comment">// 9</span></div><div class="line">arr.lastIndexOf(<span class="number">3</span>, <span class="string">'qianlong'</span>) <span class="comment">// -1 这里和indexOf不一样，传入的值不能转化为数字将得到-1</span></div><div class="line">arr.lastIndexOf(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3</span></div><div class="line">arr.lastIndexOf(<span class="number">3</span>, <span class="string">'4'</span>) <span class="comment">// 3</span></div><div class="line">arr.lastIndexOf(<span class="string">'3'</span>) <span class="comment">// -1 // 判断条件是强 3 !== '3' =&gt; -1</span></div></pre></td></tr></table></figure>
<p><strong>源码实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeLastIndexOf = ObjPro.lastIndexOf;</div><div class="line">    </div><div class="line"><span class="built_in">Array</span>.prototype.lastIndexOf = nativeLastIndexOf || <span class="function"><span class="keyword">function</span> (<span class="params">searchElement, fromIndex</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</div><div class="line">      returnIndex = <span class="number">-1</span>,</div><div class="line">      fromIndex = fromIndex * <span class="number">1</span> || len - <span class="number">1</span>;</div><div class="line">      </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = fromIndex; i &gt; <span class="number">-1</span>; i -= <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[i] === searchElement)&#123;</div><div class="line">      returnIndex = i;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> returnIndex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote>
<p>reduce 相对es5中数添加的其他方法都复杂一些，我们可以通过栗子来看一下这个api怎么使用。首先基本参数如下</p>
</blockquote>
<p><code>array.reduce(callback[, initialValue])</code>,接收一个回调函数，一个初始化的值<code>initialValue</code>。其中callback参数分别是初始化的值<code>initialValue</code>,如果没有传入<code>initialValue</code>,则默认是数组的第一项。第二个及其后面的参数分别是<code>当前值</code>,<code>索引</code>,<code>数组本身</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</div><div class="line">    sum = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">init, cur, i, array</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> init + cur;</div><div class="line">    &#125;);	</div><div class="line">    </div><div class="line">   <span class="comment">//output</span></div><div class="line">   sum <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p>我们来看一下上面的执行过程是怎样的。</p>
<p><strong>第一回合</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 因为initialValue没有传入所以回调函数的第一个参数为数组的第一项</span></div><div class="line"></div><div class="line">init = <span class="number">0</span>;</div><div class="line">cur = <span class="number">1</span>;</div><div class="line"></div><div class="line">=&gt; init + cur = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p><strong>第二回合</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init = <span class="number">1</span>;</div><div class="line">cur = <span class="number">2</span>;</div><div class="line"></div><div class="line">=&gt; init + cur = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<p><strong>第三回合</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init = <span class="number">3</span>;</div><div class="line">cur = <span class="number">3</span>;</div><div class="line"></div><div class="line">=&gt; init + cur = <span class="number">6</span>;</div></pre></td></tr></table></figure>
<p><strong>第四回合</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init = <span class="number">6</span>;</div><div class="line">cur = <span class="number">4</span>;</div><div class="line"></div><div class="line">=&gt; init + cur = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p><strong>第五回合</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init = <span class="number">10</span>;</div><div class="line">cur = <span class="number">5</span>;</div><div class="line"></div><div class="line">=&gt; init + cur = <span class="number">15</span>;</div></pre></td></tr></table></figure>
<p>最后得到结果<code>15</code></p>
<p><strong>那么我们如何自己实现一个reduce呢？</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeReduce = ObjPro.reduce;</div><div class="line">    </div><div class="line"><span class="built_in">Array</span>.prototype.reduce = nativeReduce || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, initialVal</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> init = initialVal,</div><div class="line">      i = <span class="number">0</span>;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (init === <span class="keyword">void</span> (<span class="number">0</span>)) &#123;</div><div class="line">        init = <span class="keyword">this</span>[<span class="number">0</span>];</div><div class="line">        i = <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">  <span class="keyword">for</span> (i, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (hasOwn.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">      init = callBack(init, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">    &#125;  </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> init;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><blockquote>
<p>reduceRight基本用法与reduce类似，好比indexOf与lastIndexOf，不同之处在于它是从最右边的值开始计算的。我们直接去看源码怎么实现吧</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjPro = <span class="built_in">Object</span>.prototype,</div><div class="line">    hasOwn = ObjPro.hasOwnProperty,</div><div class="line">    nativeReduceRight = ObjPro.reduceRight;</div><div class="line">   </div><div class="line"><span class="built_in">Array</span>.prototype.reduceRight = nativeReduceRight || <span class="function"><span class="keyword">function</span> (<span class="params">callBack, initialVal</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack != <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> init = initialVal,</div><div class="line">      len = <span class="keyword">this</span>.length,</div><div class="line">      i = len - <span class="number">1</span>;</div><div class="line">      </div><div class="line">  <span class="keyword">if</span> (init === <span class="keyword">void</span>(<span class="number">0</span>)) &#123;</div><div class="line">    init = <span class="keyword">this</span>[len - <span class="number">1</span>];</div><div class="line">    i -= <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (i; i &gt; <span class="number">-1</span>; i -=<span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (hasOwn.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">      init = callBack(init, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;    </div><div class="line">  <span class="keyword">return</span> init;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote>
<p> 终于写完了，断断续续快写了两天，欢迎大家看了以后提一些意见，函数实现的不一定都对，肯定有一些问题的地方，欢迎大家指正。</p>
</blockquote>
<p><strong>最后把代码放到github上面了</strong> </p>
<p><a href="https://github.com/qianlongo/es5-funcs" target="_blank" rel="external">github地址</a></p>
<p>各位大大，请让我打个小广告。😄😄😄</p>
<p><a href="https://qianlongo.github.io/">博客地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[underscore源码分析系列－3－对象方法简分析]]></title>
      <url>https://qianlongo.github.io/2016/10/16/underscore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%8D3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在前一篇文章中，我们主要说了<code>underscore</code>中几个很常见也很简单的api，在这篇博客中，我们希望说一下<code>对象</code>方面的api</p>
</blockquote>
<p><img src="http://odssgnnpf.bkt.clouddn.com/687474703a2f2f6a6263646e322e62302e7570616979756e2e636f6d2f323031362f30322f65333666346164353166656637333466616536636466313535623035333233392e6a706567.jpeg" alt="underscore源码分析系列－3"></p>
<a id="more"></a>
<h2 id="isNull"><a href="#isNull" class="headerlink" title="_.isNull"></a>_.isNull</h2><blockquote>
<p>判断一个对象是不是null，如果事就返回true。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isNull = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj === <span class="literal">null</span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意判断用的事三等，也就是当你传入undefined 的时候，返回的事false。</p>
<h2 id="isUndefined"><a href="#isUndefined" class="headerlink" title="_.isUndefined"></a>_.isUndefined</h2><blockquote>
<p>判断传入的值是否事undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isUndefined = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj === <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断条件中用的是 void，其作用的起到计算表达式的作用，计算结束之后永远返回undefined，为什么这里要用到void这个特性呢？ 本质上还是因为低版本的ie中undefined是可以被修改的。</p>
<h2 id="isNaN"><a href="#isNaN" class="headerlink" title="_.isNaN"></a>_.isNaN</h2><blockquote>
<p>如果object 是 “不是一个数字”，则返回true。 </p>
</blockquote>
<p><strong>注意： 这和原生的isNaN 函数不一样，如果变量是undefined，原生的isNaN 函数也会返回 true 。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isNaN = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断传入的值是否是Number类型，接着判断该值是否等于本身。重点看后面的判断条件 <code>+obj</code>,这句话可以将字符串的数字转化成真正的数字，便排除了<code>isNaN</code>这种情况。</p>
<h2 id="isObject"><a href="#isObject" class="headerlink" title="_.isObject"></a>_.isObject</h2><blockquote>
<p>如果object是一个对象，返回true。需要注意的是JavaScript数组和函数是对象，字符串和数字不是。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_.isObject = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> obj;</div><div class="line">  <span class="keyword">return</span> type === <span class="string">'function'</span> || type === <span class="string">'object'</span> &amp;&amp; !!obj;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js的集中数据类型中包括常见的<code>{}</code>,其实函数也看作是一种对象类型。当然<code>null</code>也称作是空对象。所以该api，将类型是<code>function</code>或者<code>object</code>(出了null)都返回true。</p>
<h2 id="isElement"><a href="#isElement" class="headerlink" title="_.isElement"></a>_.isElement</h2><blockquote>
<p>如果object是一个DOM元素，返回true。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isElement = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> !!(obj &amp;&amp; obj.nodeType === <span class="number">1</span>);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过传入对象的nodeType属性来判断一个对象是否是DOM元素，其实这样并不严谨。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'qianlong'</span>,</div><div class="line">  <span class="attr">nodeType</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(_.isElement(obj)) =&gt; <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>可以看到只要对象有一个属性是nodeType并且是1，那么_.isElement就会认为这是一个DOM元素。</p>
<h2 id="has-object-key"><a href="#has-object-key" class="headerlink" title="_.has(object, key)"></a>_.has(object, key)</h2><blockquote>
<p>判断object对象是否含有key属性。 有则返回true，否则返回false</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var ObjProto = Object.prototype;</div><div class="line">var hasOwnProperty = ObjProto.hasOwnProperty;</div><div class="line"></div><div class="line">_.has = function (obj, has) &#123;</div><div class="line">  return obj != null &amp;&amp; hasOwnProperty.call(obj, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里通过hasOwnProperty判断，也就是原形是上面的属性，不会去判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.sex = <span class="string">'boy'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'qianlong'</span>);</div><div class="line"></div><div class="line">_.has(p1, <span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">_.has(p1, <span class="string">'sex'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="isArray"><a href="#isArray" class="headerlink" title="_.isArray"></a>_.isArray</h2><blockquote>
<p>判断传入的值是否是数组，如果是就返回<code>true</code></p>
</blockquote>
<p>判断一个变量是否是数组，想必大家比较熟悉了，我们看下_中是怎么实现的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ObjProto = <span class="built_in">Object</span>.prototype;</div><div class="line"><span class="keyword">var</span> toString = ObjProto.toString;</div><div class="line"><span class="keyword">var</span> nativeIsArray = <span class="built_in">Array</span>.isArray;</div><div class="line"></div><div class="line">_.isArray = nativeIsArray || <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> toString.call(obj) === <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先在源码的开头保存了nativeIsArray，如果在支持该函数的浏览器中就用这个，如果在一些版本较低的浏览器中就用自己实现的。很显然其他的数据类型也可以用类似的方法来实现。</p>
<h2 id="isArguments-isFunction-isString-isNumber-isDate-isRegExp-isError"><a href="#isArguments-isFunction-isString-isNumber-isDate-isRegExp-isError" class="headerlink" title=".isArguments, .isFunction ,.isString, .isNumber, .isDate, .isRegExp, _.isError"></a><em>.isArguments, </em>.isFunction ,<em>.isString, </em>.isNumber, <em>.isDate, </em>.isRegExp, _.isError</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_.each([<span class="string">'Arguments'</span>, <span class="string">'Function'</span>, <span class="string">'String'</span>, <span class="string">'Number'</span>, <span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Error'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    _[<span class="string">'is'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> toString.call(obj) === <span class="string">'[object '</span> + name + <span class="string">']'</span>;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>这里用到了其自身的工具方法<code>_.each</code>来对一个数组进行遍历，最后导出多个相应的判断数据类型的方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[underscore源码分析系列－2－常见简单函数分析]]></title>
      <url>https://qianlongo.github.io/2016/10/16/underscore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%8D2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>这一篇源码分析中，我们会试着去看<code>underscore</code>几个比较常见的函数</p>
</blockquote>
<p><img src="http://odssgnnpf.bkt.clouddn.com/075139_ey1FV7wc.jpg" alt=""></p>
<a id="more"></a>
<h2 id="random"><a href="#random" class="headerlink" title="_.random"></a>_.random</h2><blockquote>
<p>返回一个min 和 max之间的随机整数。如果你只传递一个参数，那么将返回0和这个参数之间的<code>整数</code>。取值范围是[min, max],注意是闭区间</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_.random = <span class="function"><span class="keyword">function</span> (<span class="params">min, max</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (max == <span class="literal">null</span>) &#123;</div><div class="line">    max = min;</div><div class="line">    min = <span class="number">0</span>;</div><div class="line">  &#125;	</div><div class="line">  <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数参数可以传进去两个或者一个，当为一个的时候，返回的是[0, max] 之间的一个整数，平实需要得到一个指定范围的数字的时候，比较常用。</p>
<h2 id="noConflict"><a href="#noConflict" class="headerlink" title="_.noConflict"></a>_.noConflict</h2><blockquote>
<p>放弃Underscore 的控制变量”_”。返回Underscore 对象的引用。也就是为了防止冲突而做的处理。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意在源码一开头有这句话</span></div><div class="line"><span class="keyword">var</span> previousUnderscore = root._;</div><div class="line"></div><div class="line">_.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  root._ = previousUnderscore;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码非常简单，就是把原来的全局变量_给赋值回去，而将underscore的引用作为函数调用后的返回值，提供给调用方使用。这是一种非常经典的防止全局冲突的方法。</p>
<p><strong>举个例子</strong>我们要写一个平实自己经常要用到的工具类，取的名字是$,当然假设之前，我们并不知道jQuery中也用了这个名字，那么在实际项目中为了防止自己写的这个工具库把全局的美元符号给污染掉，怎么办呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/3.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> prev$ = win.$,</div><div class="line">      $ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      </div><div class="line">      &#125;;</div><div class="line">      $.isUndefined = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj === <span class="keyword">void</span>(<span class="number">0</span>);		</div><div class="line">      &#125;</div><div class="line">      $.random = <span class="function"><span class="keyword">function</span> (<span class="params">min, max</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isUndefined(max)) &#123;</div><div class="line">          max = min;</div><div class="line">          min = <span class="number">0</span>;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>))</div><div class="line">      &#125;;</div><div class="line">      $.showMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">        alert(msg)</div><div class="line">      &#125;;</div><div class="line">      $.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        win.$ = prev$;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line">      win.$ = $;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"></div><div class="line">	$.showMessage(<span class="string">'hello world'</span>); <span class="comment">// 弹出hello world</span></div><div class="line">		</div><div class="line"><span class="comment">//自己写的$把jQuery中的$给覆盖掉了</span></div><div class="line">  </div><div class="line">    <span class="keyword">var</span> my$ = $.noConflict(); <span class="comment">// 不执行这句 下面的$() 调用会没有反应</span></div><div class="line">    </div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">'hello world two'</span>); <span class="comment">// 弹出hello world two</span></div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="noop"><a href="#noop" class="headerlink" title="_.noop"></a>_.noop</h2><blockquote>
<p>返回undefined，不论传递给它的是什么参数。 可以用作默认可选的回调参数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_.noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure>
<p>underscore帮我们提供一个空函数，这个有啥用呢？ 其实还真有用处，平实如果我们要初始化某个变量为空函数，方便后面再把这个变量对应的值替换掉。又或者甚至用作判断一个变量是否是undefined。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (a == _.noop()) &#123;</div><div class="line">  alert(<span class="string">'a 是 undefined'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">showMsg</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="attr">showAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">showMsg</span>: _.noop,</div><div class="line">  <span class="attr">showAge</span>: _.noop</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很显然这样可以有两个好处，</p>
<ol>
<li>因为在ie低版本中undefined的值可能被改写，所以导致判断不准确。但是如果直接于<code>_.noop()</code>相比较就不会有这个问题</li>
<li>直接给浏览器省了创建两个空函数的麻烦</li>
</ol>
<h2 id="now"><a href="#now" class="headerlink" title="_.now"></a>_.now</h2><blockquote>
<p>一个优化的方式来获得一个当前时间的整数时间戳。可用于实现定时/动画功能。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.now = <span class="built_in">Date</span>.now || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果当前的浏览器提供的Date对象中含有now函数就用直接提供的，否则就用自己实现的。平常如果需要生成唯一的id，可以用到这个函数。</p>
<h2 id="identity"><a href="#identity" class="headerlink" title="_.identity"></a>_.identity</h2><blockquote>
<p>返回与传入参数相等的值,这个函数看似无用, 但是在Underscore里被用作默认的迭代器iterator.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.identity = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数非常简单就是你传进来什么东西就返还给你什么东西。</p>
<h2 id="constant"><a href="#constant" class="headerlink" title="_.constant"></a>_.constant</h2><blockquote>
<p>创建一个函数，这个函数返回传入的值 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_.constant = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="uniqueId"><a href="#uniqueId" class="headerlink" title="_.uniqueId"></a>_.uniqueId</h2><blockquote>
<p>为需要的客户端模型或DOM元素生成一个全局唯一的id。如果prefix参数存在， id 将附加在其后面。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> idCounter = <span class="number">0</span>;</div><div class="line">_.uniqueId = <span class="function"><span class="keyword">function</span> (<span class="params">prefix</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = ++idCounter + <span class="string">''</span>; <span class="comment">// 将数字转化为字符串</span></div><div class="line">  <span class="keyword">return</span> prefix ? prefix + id : id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>万事开头难，啥复杂难的事都是从简单容易的事情开始做的，这篇博文主要讲了几个<code>underscore</code>中非常简单的api。接下来会慢慢接触一些比较难的，又非常重要的api。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你看，他们都在感恩]]></title>
      <url>https://qianlongo.github.io/2016/10/15/%E4%BD%A0%E7%9C%8B%EF%BC%8C%E4%BB%96%E4%BB%AC%E9%83%BD%E5%9C%A8%E6%84%9F%E6%81%A9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇在大一时候写的文章，转眼间过去四年，自己也开始出来工作，但是给爸妈唱《父亲》这首歌的感觉依然还在。愿我们时常心存感激、感恩。</p>
</blockquote>
<p>“鸦有反哺之情，羊有跪乳之义”生而为人，我们要懂得助人于困顿，救人于危难，更要懂得知恩图报，受之滴水，报以涌泉。</p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/thankyou.jpg" alt="感恩图片"></p>
<a id="more"></a>
<p>感恩是三顾茅芦的死而后已。生于战火纷飞的三国，你高卧茅芦，闲庭山水。“不求闻达于诸侯”是你志趣的归宿;“凤歌笑孔丘，一生好入名山游”是你个性的写照。但感于刘备三顾之恩，你毅然选择了出山，为了统一大业，你六出祈山，七擒孟获，排八阵，演七星赤壁火温暖了东吴，草船上刻有你的智慧。当汉室江山摇摇欲坠之际，你挽狂澜于既倒，扶大厦于将倾，用双手托起它的兴衰存亡。当五丈原的秋风刮起，你用一生的忠诚诠释了感恩的重量。</p>
<p>感恩是一杯奶的生命回报。美国著名医生富兰克林.道尔顿年幼时疾苦难当，一日，走在凛冽的寒风中，又累又饿的他透过街道旁的窗户，温暖的灯光下，一个小女孩正在和她的家人吃饭，有说有笑。鼓起万分勇气，他敲响了那座门。“能给我…一口水喝吗？”道尔顿怯怯地说道。“给，趁热喝吧，别冻着。”小女孩微笑着递过一杯牛奶。多年后道尔顿成就医业，为小女孩治愈不治之症，分文不取。他说:“一杯牛奶足以唤醒一颗感恩的生命。”是啊！感恩让我们懂得回报，让我们心怀善念。</p>
<p>感恩是乌锥马的含笑饮泣。当拔山举鼎的盖世传奇褪色成一页淡黄的史册，那一夜楚歌四起，士卒逃散。站在生命的弯道，是继续随项羽奋力杀敌，还是掉头东转，弃他而去？这一刻，不见你茫然失色，却见乌锥颈血尽染乌江。苍天抽泣大地无语。好一匹乌锥哦！感恩项羽，那一刻在流星划破天际的刹那，你真正与岁月长河完美对接。</p>
<p>小时候喜欢依偎在爸爸妈妈的怀抱，觉得他们是一座山，深幽的山。我是一条藤，缠绕的藤。藤不离山，山眷着藤。当山不再那么高大巍峨，藤就该奋力茁壮成长，为山送去一份阴凉，一份希冀。</p>
<p>   母亲节，唱了一首《父亲》给爸爸妈妈听，你们在儿子心中是同“一个人”，是最重要，最爱，最疼的人，我爱你……我是你的骄傲吗？还在为我而担心吗？ 你牵挂的孩子啊，长大啦。儿子长大啦，谢谢你们做的一切，双手撑起我们的家。以后儿子的手也要和你们紧紧地抱在一起，一起温暖我们的家……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-slider]]></title>
      <url>https://qianlongo.github.io/2016/10/08/react-slider/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>react 自从去年火起来之后，在前端的应用可谓广泛，许多人为之倾倒，组件化，虚拟dom，从很大程度上将前端开发者的思维从jQuery dom操作的时代劈将开来。几个月之前用react配合webpack打包尝试写了一个轮播图滚动组件，一直没有纪录和总结下来，现在重新翻起，希望可以将其写成一篇博文，一是回顾react基本用法和应用，二是坚持写博文的习惯。</p>
</blockquote>
<p><a href="https://github.com/qianlongo/react-slider" target="_blank" rel="external">github地址</a></p>
<p><code>轮播图组件预览如下图</code></p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/slider.gif" alt="轮播图图示"></p>
<a id="more"></a>
<h2 id="组件分析"><a href="#组件分析" class="headerlink" title="组件分析"></a>组件分析</h2><blockquote>
<p>首先我想做的组件主要目的是展示多张图片，并且可以通过左右按钮来进行切换，又或者可以通过底部的小点按钮进行图片切换。简要的画了一张组件示意图如下，将其拆分开来，可以分成</p>
</blockquote>
<ol>
<li>左右箭头（控制图片的左右切换）</li>
<li>底部小圆点（切换图片）</li>
<li>中间图片展示区域</li>
</ol>
<p>几个部分。</p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/distance.png" alt="组件分析"></p>
<h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><blockquote>
<p>对要做的组件有了一个比较明确的划分之后，可以开始规划目录结构。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">--app</div><div class="line">  --components</div><div class="line">  	 --App <span class="comment">// 最终输出的完成的图片轮播组件</span></div><div class="line">  	 	--App.js</div><div class="line">  	 	--App.scss</div><div class="line">  	 --Arrows <span class="comment">// 箭头小组件</span></div><div class="line">  	 	--Arrows.js </div><div class="line">  	 	--Arrows.scss</div><div class="line">  	 --Dots <span class="comment">// 小点组件</span></div><div class="line">  	 	--Dots.js</div><div class="line">  	 	--Dots.scss</div><div class="line">  	 --Imgs <span class="comment">// 图片组件</span></div><div class="line">  	 	--Imgs.js</div><div class="line">  	 	--Imgs.scss</div><div class="line">  --images</div><div class="line">  	 ... <span class="comment">// 一些项目用到的图片</span></div><div class="line">  --libs</div><div class="line">    --base.js <span class="comment">// 输出react 需要用到的 React 和 DOM</span></div><div class="line">  --styles</div><div class="line">  	 ... <span class="comment">// 项目scss</span></div><div class="line">  --index.js	<span class="comment">// 入口文件</span></div><div class="line">--package.json <span class="comment">// 项目依赖与相关说明</span></div><div class="line">--READEME.md	 </div><div class="line">--webpack.config.js <span class="comment">// webpack配置文件</span></div><div class="line">--webpack.production.config.js <span class="comment">// 构建脚本</span></div></pre></td></tr></table></figure>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul>
<li><strong>webpack配置文件</strong></li>
</ul>
<blockquote>
<p>webpack的配置文件很平常，就是日常项目里面用到的一点知识。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ROOT_PATH = path.resolve(__dirname);</div><div class="line"><span class="keyword">var</span> APP_PATH = path.resolve(ROOT_PATH, <span class="string">'app'</span>);</div><div class="line"><span class="keyword">var</span> BUILD_PATH = path.resolve(ROOT_PATH, <span class="string">'build'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: APP_PATH, <span class="comment">// 入口文件</span></div><div class="line">  output: &#123; <span class="comment">// 输出文件</span></div><div class="line">    path: BUILD_PATH,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devServer</span>: &#123; <span class="comment">// 静态服务</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">progress</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="comment">// sass loader</span></div><div class="line">        test: <span class="regexp">/\.scss$/</span>,</div><div class="line">        <span class="attr">loaders</span>: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'sass'</span>],</div><div class="line">        <span class="attr">include</span>: APP_PATH</div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="comment">// 图片loader 大于4兆的图片转成base64</span></div><div class="line">        test: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'url?limit=40000'</span></div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="comment">// es6语法支持loader</span></div><div class="line">        test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">        <span class="attr">include</span>: APP_PATH,</div><div class="line">        <span class="attr">query</span>: &#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">'es2015'</span>,<span class="string">'react'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [ </div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="comment">// 快速生成html插件</span></div><div class="line">      title: <span class="string">'hello world app'</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="comment">// jQuery插件</span></div><div class="line">      $: <span class="string">"jquery"</span>,</div><div class="line">      <span class="attr">jQuery</span>: <span class="string">"jquery"</span>,</div><div class="line">      <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>lib/base.js</strong></li>
</ul>
<blockquote>
<p>该文件主要作用是输出react和react-dom的引用这样在写<code>箭头组件</code>、<code>小点组件</code>、<code>图片组件</code>的时候就可以不用每次都去 <code>import</code>了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> Render <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  React,</div><div class="line">  Render</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>很简单吧，就四句，后面需要用到react这两个关键库的时候可以通过以下方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;React, Render&#125; <span class="keyword">from</span> <span class="string">'./libs/base'</span>;</div></pre></td></tr></table></figure>
<p><strong>待续</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大学回忆-初入校门]]></title>
      <url>https://qianlongo.github.io/2016/10/08/%E5%A4%A7%E5%AD%A6%E5%9B%9E%E5%BF%86-%E5%88%9D%E5%85%A5%E6%A0%A1%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>2016年10月8日凌晨12点半，窗外的秋雨淅淅沥沥地下着，不紧不慢，也不大声响，悄悄滴落在地。没有初夏的酷热难当，也没有冬日的凌烈寒风，此时入眠当是正好。闭眼想早早睡去，明日还得上班呢！然脑海思绪不断，大学一幕幕铺将开来，甚是怀念。遂起身开灯，将这时光赋予文字，记录下来。</p>
</blockquote>
<p><img src="http://odssgnnpf.bkt.clouddn.com/%E5%A4%A7%E4%B8%80.jpeg" alt="大一脐橙节"></p>
<a id="more"></a>
<p><strong>大一我们还懵懵懂懂，上课还是认真听讲的好孩子，喜欢参加各种社团，见到喜欢的女孩子还会害羞脸红…</strong></p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/%E8%A5%BF%E6%A0%A1%E5%8C%BA%E7%85%A7%E7%89%87.jpg" alt="大一离开西校区留影"></p>
<p><strong>转眼间，一张西校区的合影标志着，大一已经结束，大二的生涯就要开始</strong></p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/%E5%A4%A7%E4%B8%89.jpeg" alt="大三龙南游玩"></p>
<p><strong>时间到了大三，我们不再热衷于社团、学生会、各种活动，喜欢做些自己想做的事情，但是依旧迷茫</strong></p>
<p><img src="http://odssgnnpf.bkt.clouddn.com/%E6%AF%95%E4%B8%9A%E7%85%A7%E7%89%871.jpg" alt="毕业学士照"></p>
<p><strong>穿上学士服的那一刻，我们毕业了</strong></p>
<blockquote>
<p>四年匆匆而过，离开校园的那一刻意味着你我都告别了一段纯真的青春，一段年少轻狂的岁月，一个充满幻想的时代…接下便是风雨兼程，为梦想多加努力。</p>
</blockquote>
<p>回想这四年，似乎很漫长，却又无时不刻在逝去，不经意间便从指尖溜走。这不，你我都背上行囊，奔向远方。还记得答辩前的不安，别离时的伤感，散伙饭时喝醉的惆怅吗？</p>
<h2 id="高考结束"><a href="#高考结束" class="headerlink" title="高考结束"></a>高考结束</h2><blockquote>
<p>高三的日子枯涩又极其酸甜，百无聊赖但却充实饱满，高考过后，同学间相互往来嬉闹，讨论分数，期待大学未来。分数出来后，不是很理想，又不太想离家乡太过遥远，于是选择了一所江西省声望不错的学校－江西理工大学。收到通知书的刹那，喜悦非常，日日幻想大学生活，开学日期定于9月12日前后，但迫不及耐，与好友<code>陈良春</code>准备8号便出发前往赣州梦想之地。</p>
</blockquote>
<h2 id="前往大学的路上"><a href="#前往大学的路上" class="headerlink" title="前往大学的路上"></a>前往大学的路上</h2><blockquote>
<p>上了大学之后才知道，原来许多学生的家长都会将其子女送到学校，孩子第一次出远门，多是放心不下，唯安全送达，方安心归家，并嘱咐一二，大学切以学业为重，不可荒废人生。自己从小爸妈就出远门打工，与爷爷相守，独立自是不必多说，倒也省去爸妈担心的困扰。收拾两三行李，带上爷爷的牵挂，便上路了。</p>
</blockquote>
<h2 id="大跌眼镜"><a href="#大跌眼镜" class="headerlink" title="大跌眼镜"></a>大跌眼镜</h2><blockquote>
<p>路途不长，3个小时。便到达赣州东河汽车站，暑假打暑期工时，认识一师院大二学生<code>温程</code>，他甚是贴切，担心我们路况不熟，社会阅历尚浅，容易被骗，就早早在车站接我们。终于来到理工大一新生校区，我已吐槽无力，这尼玛的就是我梦想的大学？ are you kidding me? </p>
</blockquote>
<p><code>未完待续</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[underscore源码分析系列－1－整体结构]]></title>
      <url>https://qianlongo.github.io/2016/08/21/underscore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%8D1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>一直希望有一个机会可以阅读某库的源码，并写一些自己的想法和思考，最终将目标定在<code>underscore</code>,一个纯粹的js工具库，没有dom、bom的参与。</p>
</blockquote>
<p><img src="http://odssgnnpf.bkt.clouddn.com/underscorejs.png" alt="underscore.js"></p>
<a id="more"></a>
<h2 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h2><blockquote>
<p>首先我们来看一下，underscore工具库的整体框架</p>
</blockquote>
<p><code>verison</code> <code>1.8.3</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">  <span class="comment">//拿到一个全局对象，browser中是window对象，server中是exports</span></div><div class="line">  <span class="keyword">var</span> root = <span class="keyword">this</span>;</div><div class="line">	</div><div class="line">  <span class="comment">// 缓存一些原生js的原型以及es5的方法</span></div><div class="line">	</div><div class="line">  <span class="comment">// ...</span></div><div class="line">	</div><div class="line">  <span class="comment">//underscore工具库的构造函数</span></div><div class="line">  <span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj;</div><div class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj);</div><div class="line">    <span class="keyword">this</span>._wrapped = obj;</div><div class="line">  &#125;;</div><div class="line">	</div><div class="line">  <span class="comment">//将构造函数暴露给全局</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> exports !== <span class="string">'undefined'</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports)&#123;</div><div class="line">      exports = <span class="built_in">module</span>.exports = _;</div><div class="line">    &#125;</div><div class="line">    exports._=_;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    root._ = _;</div><div class="line">  &#125;</div><div class="line">	</div><div class="line">  <span class="comment">// 版本</span></div><div class="line">	</div><div class="line">  _.VERSION = <span class="string">'1.8.3'</span>;</div><div class="line">	</div><div class="line">  <span class="comment">/*underscore中一些内部变量和函数*/</span></div><div class="line">	</div><div class="line">  <span class="comment">//...</span></div><div class="line">	</div><div class="line">  <span class="comment">/*提供给外部调用的静态api*/</span></div><div class="line">	</div><div class="line">  _.each = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  _.first = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  _.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  _.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  _.noConfict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  _.chain = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//...</span></div><div class="line">	</div><div class="line">  <span class="comment">//一些原型上面的方法</span></div><div class="line">	</div><div class="line">  _.prototype.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//...</span></div><div class="line">	</div><div class="line">  <span class="comment">//支持amd</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;	define(<span class="string">'underscore'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> _;</div><div class="line">   &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;).call(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><strong>大体框架如上所述</strong></p>
<p>接下来我们看一下underscore库刚开始设置哪些后面要用到的常用的变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = <span class="keyword">this</span>;</div><div class="line"></div><div class="line"><span class="comment">// 保存引进underscore库之前可能存在于全局对象下面的_属性值，主要给noConflict静态函数做去冲突用</span></div><div class="line"><span class="keyword">var</span> previousUnderscore = root._;</div><div class="line"></div><div class="line"><span class="comment">// 保存一些长江的构造函数的原型，数组，对象，函数等</span></div><div class="line"><span class="keyword">var</span> ArrayProto = <span class="built_in">Array</span>.prototype, ObjProto = <span class="built_in">Object</span>.prototype, FuncProto = <span class="built_in">Function</span>.prototype;</div><div class="line"></div><div class="line"><span class="comment">// 保存一些数组的常见方法</span></div><div class="line"><span class="keyword">var</span></div><div class="line">  push             = ArrayProto.push,</div><div class="line">  slice            = ArrayProto.slice,</div><div class="line">  toString         = ObjProto.toString,</div><div class="line">  hasOwnProperty   = ObjProto.hasOwnProperty;</div><div class="line"></div><div class="line"><span class="comment">// 保存es5的一些方法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span></div><div class="line">  nativeIsArray      = <span class="built_in">Array</span>.isArray,</div><div class="line">  nativeKeys         = <span class="built_in">Object</span>.keys,</div><div class="line">  nativeBind         = FuncProto.bind,</div><div class="line">  nativeCreate       = <span class="built_in">Object</span>.create;</div></pre></td></tr></table></figure>
<h2 id="underscore构造函数"><a href="#underscore构造函数" class="headerlink" title="underscore构造函数"></a>underscore构造函数</h2><blockquote>
<p>最后我们来看一下，构造函数本身。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj; <span class="comment">// 如果传进来的obj是_的实例，那么直接将obj返回</span></div><div class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj); <span class="comment">// 如果不是_的实例，那么内部直接new 一个 _的实例，然后返回</span></div><div class="line">    <span class="keyword">this</span>._wrapped = obj; <span class="comment">// 给_的实例挂一个属性_wrapped，并赋值为obj</span></div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p><strong>underscore构造函数内部这样处理，可以保证不管外部是否适用new的形式调用，都会拿到一个underscore实例</strong></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote>
<p>underscore.js第一篇就先到这里，了解了其整体的结构，接下来我们开始分析一些比较常用的函数。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery源码分析－分析碎片－init解读]]></title>
      <url>https://qianlongo.github.io/2016/08/14/jQuery%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%8D%E5%88%86%E6%9E%90%E7%A2%8E%E7%89%87%EF%BC%8Dinit%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>距离上一次写博客已经快4个月了，4个月快也慢，转眼间自己便毕业离开学校由一名学生成为一名<strong>上班狗</strong>。想起6月初答辩时的紧张不安，别离时的万分不舍，一切仿佛就在眼前…</p>
</blockquote>
<p><strong>😄，好像跑偏了，哈哈哈！今天想开始写关于jQuery源码解读的系列博客，jQuery是前端开发人员使用非常广的类库之一，帮助我们解决了许多现实问题，希望通过查看jQuery源码，学习其中的编程技巧，设计模式，以及前端开发中常见的知识点等等</strong></p>
<hr>
<a id="more"></a>
<h2 id="分析碎片－init解读"><a href="#分析碎片－init解读" class="headerlink" title="分析碎片－init解读"></a>分析碎片－init解读</h2><blockquote>
<p>jQuery使用起来非常的方便，和常见的js面相对象写法有些差异，我们可以通过<code>$()</code>函数调用的形式来创建一个jQuery实例，从而省去<code>new</code> 操作的麻烦。</p>
</blockquote>
<p>为什么可以这样呢？ 老师告诉我们当你要创建对象的时候，请<code>new</code> 一个，现在不<code>new</code>为啥就可以创建对象了嘛，其实并不是没有<code>new</code>只是jQuery把这个操作放在了内部，请看…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line"><span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context, rootjQuery );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>可以看出，当我们在$()方法的时候，本质上通过jQuery.fn.init这个构造器创建了一个实例</strong>接下来，我们开始一步步看jQuery.fn.init这个构造器都做了一些什么事</p>
<h2 id="的常见用法"><a href="#的常见用法" class="headerlink" title="$() 的常见用法"></a>$() 的常见用法</h2><p>关于jQuery $()的常见用法欢迎查看<a href="http://qianlongo.github.io/2016/03/26/jQuery%E4%B8%AD-%E5%87%BD%E6%95%B0%E7%9A%847%E7%A7%8D%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/">$()的七种常见用法</a></p>
<p>其中最常用的方式是给$()传进去一个字符串和执行上下文，也就是 jQuery(selector,context)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> match, elem;</div><div class="line"></div><div class="line">	<span class="comment">// HANDLE: $(""), $(null), $(undefined), $(false)</span></div><div class="line">	<span class="keyword">if</span> ( !selector ) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>init方法中一开始便将传进来的selector进行了一层判断，当selector为</p>
<ul>
<li>空字符串</li>
<li>null</li>
<li>undefined</li>
<li>false </li>
</ul>
<p>在js中表示为<code>假</code>操作的时候，便直接返回一个jQuery实例，只不过该实例与一般的jQuery对象有些不同，该实例没有0，1，2…引用着某个dom的属性也没有表示长度的length属性等</p>
<p>紧接着</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> selector === <span class="string">"string"</span> ) &#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (selector.nodeType) &#123;</div><div class="line"> 	<span class="comment">// ...</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (jQuery.isFunction( selector )) &#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对传进来的selector又进行了多层if else if判断，我们先看第一个<code>typeof selector === &quot;string&quot;</code></p>
<p>日常在用jQuery的时候，当传进去的selector是字符串的时候我们可能会涉及到以下用法</p>
<p><code>选择元素的常见用法</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>) </div><div class="line">$(<span class="string">'.box'</span>) </div><div class="line">$(<span class="string">'div'</span>)  </div><div class="line">$(<span class="string">'#div1 div.box'</span>)</div><div class="line"></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"></div><div class="line">`创建元素的常见用法<span class="string">`</span></div><div class="line"></div><div class="line">`<span class="string">``</span> javascript</div><div class="line">$(<span class="string">'&lt;li&gt;'</span>)  </div><div class="line">$(<span class="string">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</div></pre></td></tr></table></figure>
<p><strong>在进入selctor已经是<code>string</code>判断的时候</strong>，接下来jQuery将</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( selector.charAt(<span class="number">0</span>) === <span class="string">"&lt;"</span> &amp;&amp; selector.charAt( selector.length - <span class="number">1</span> ) === <span class="string">"&gt;"</span> &amp;&amp; selector.length &gt;= <span class="number">3</span> ) &#123;</div><div class="line">	<span class="comment">// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check</span></div><div class="line">	match = [ <span class="literal">null</span>, selector, <span class="literal">null</span> ];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	match = rquickExpr.exec( selector );	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;div&gt;'</span>)</div><div class="line">$(<span class="string">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</div></pre></td></tr></table></figure>
<p>符合以上selector场景的match置成了一个数组<code>match = [ null, selector, null ];</code></p>
<p>而将符合以下参数条件的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&apos;#div1&apos;) </div><div class="line">$(&apos;.box&apos;) </div><div class="line">$(&apos;div&apos;) </div><div class="line">$(&apos;#div1 div.box&apos;)</div><div class="line">$(&apos;&lt;div&gt;test&apos;)</div></pre></td></tr></table></figure>
<p>通过正则匹配将</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js中call、apply、bind那些事]]></title>
      <url>https://qianlongo.github.io/2016/04/26/js%E4%B8%ADcall%E3%80%81apply%E3%80%81bind%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>回想起之前的一些面试，几乎每次都会问到一个js中关于call、apply、bind的问题，比如…</p>
</blockquote>
<ol>
<li>怎么利用call、apply来求一个数组中最大或者最小值</li>
<li>如何利用call、apply来做继承</li>
<li>apply、call、bind的区别和主要应用场景</li>
</ol>
<a id="more"></a>
<blockquote>
<p>虽然网上有很多关于这方面的博客和文章，但还是决定写一篇自己对这方面知识的理解。</p>
</blockquote>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote>
<p>首先问个问题，这三个函数的存在意义是什么？答案是<strong>改变函数执行时的上下文</strong>，再具体一点就是<strong>改变函数运行时的this指向</strong>。有了这个认识，接下来我们来看一下,怎么使用这三个函数。</p>
</blockquote>
<p><strong>举个栗子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line">  <span class="attr">showName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'qianlong'</span>);</div><div class="line">  person.showName();</div></pre></td></tr></table></figure>
<p>上面的代码中person调用showName方法后会在浏览器的控制台输出<code>qianlong</code></p>
<p><strong>接下来</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'cat'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中有一个对象字面量，他没有所谓的showName方法，但是我还是想用？怎么办？(坑爹了，这好像在让巧媳妇去做无米之炊)，不过没关系，call、apply、bind可以帮我们干这件事。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1 call</span></div><div class="line">person.showName.call(animal);</div><div class="line"><span class="comment">// 2 apply</span></div><div class="line">person.showName.apply(animal);</div><div class="line"><span class="comment">// 3 bind</span></div><div class="line">person.showName.bind(animal)();</div></pre></td></tr></table></figure>
<p><strong>啦啦啦，有木有很神奇，控制台输出了三次<code>cat</code></strong></p>
<p>我们拿别人的showName方法，并动态改变其<strong>上下文</strong>帮自己输出了信息，说到底就是实现了<strong>复用</strong></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><blockquote>
<p>上面看起来三个函数的作用差不多，干的事几乎是一样的，那为什么要存在3个家伙呢，留一个不就可以。所以其实他们干的事从本质上讲都是一样的<strong>动态的改变this上下文</strong>,但是多少还是有一些差别的..</p>
</blockquote>
<p><strong>call、apply与bind的差别</strong></p>
<blockquote>
<p>call和apply改变了函数的<strong>this</strong>上下文后便<strong>执行</strong>该函数,而bind则是返回改变了上下文后的一个函数。</p>
</blockquote>
<p><strong>call、apply的区别</strong></p>
<blockquote>
<p>他们俩之间的差别在于参数的区别，call和aplly的第一个参数都是要改变上下文的对象，而call从第二个参数开始以参数列表的形式展现，apply则是把除了改变上下文对象的参数放在一个数组里面作为它的第二个参数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">fn.call(obj, arg1, arg2, arg3...);</div><div class="line">fn.apply(obj, [arg1, arg2, arg3...]);</div></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote>
<p>知道了怎么使用和他们之间的区别，接下来我们来了解一下通过call、apply、bind的常见应用场景。</p>
</blockquote>
<ul>
<li><strong>求数组中的最大和最小值</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">34</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">-67</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">-8</span>,<span class="number">687</span>];</div><div class="line"></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</div><div class="line"><span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">34</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">-67</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">-8</span>,<span class="number">687</span>);</div><div class="line"></div><div class="line"><span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, arr);</div><div class="line"><span class="built_in">Math</span>.min.call(<span class="built_in">Math</span>, <span class="number">34</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">-67</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">-8</span>,<span class="number">687</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong>将伪数组转化为数组</strong></li>
</ul>
<blockquote>
<p>js中的伪数组(例如通过<code>document.getElementsByTagName</code>获取的元素)具有length属性，并且可以通过0、1、2…下标来访问其中的元素，但是没有Array中的push、pop等方法。我们可以利用call、apply来将其转化为真正的数组这样便可以方便地使用数组方法了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayLike = &#123;</div><div class="line">  <span class="number">0</span>: <span class="string">'qianlong'</span>,</div><div class="line">  <span class="number">1</span>: <span class="string">'ziqi'</span>,</div><div class="line">  <span class="number">2</span>: <span class="string">'qianduan'</span>,</div><div class="line">  <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面就是一个普通的对象字面量，怎么把它变成一个数组呢？最简单的方法就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrayLike);</div></pre></td></tr></table></figure>
<p>上面arr便是一个包含arrayLike元素的真正的数组啦( <strong>注意数据结构必须是以数字为下标而且一定要有length属性</strong> )</p>
<ul>
<li><strong>数组追加</strong></li>
</ul>
<blockquote>
<p>在js中要往数组中添加元素，可以直接用push方法，</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"></div><div class="line">[].push.apply(arr1, arr2);</div><div class="line"></div><div class="line"><span class="comment">// arr1 [1, 2, 3, 4, 5, 6]</span></div><div class="line"><span class="comment">// arr2 [4,5,6]</span></div></pre></td></tr></table></figure>
<p><strong>判断变量类型</strong></p>
<blockquote>
<p>对于对象型的数据类型，我们可以借助call来得知他的具体类型，例如数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) == <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">isArray([]) <span class="comment">// true</span></div><div class="line">isArray(<span class="string">'qianlong'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于canvas的局部清晰图片查看效果]]></title>
      <url>https://qianlongo.github.io/2016/04/24/%E5%9F%BA%E4%BA%8Ecanvas%E7%9A%84%E5%B1%80%E9%83%A8%E6%B8%85%E6%99%B0%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>一直对canvas非常感兴趣，今天抽空写了一个在一张模糊图片中查看局部清晰图的小demo,时间比较晚了,先放图，明日写博文.</p>
</blockquote>
<iframe src="https://codepen.io/qianlong/embed/ALymLp" frameborder="0" allowfullscreen></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[聊一聊这些常见而且实用的css技巧]]></title>
      <url>https://qianlongo.github.io/2016/04/19/%E8%81%8A%E4%B8%80%E8%81%8A%E8%BF%99%E4%BA%9B%E5%B8%B8%E8%A7%81%E8%80%8C%E4%B8%94%E5%AE%9E%E7%94%A8%E7%9A%84css%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>生活需要总结，需要不断地发现自己的缺陷然后找到好的方法，改之。古人说好记性不如烂笔头，人终归是会遗忘一些事情的，哪怕它曾经深深地印在你的脑海，久久挥之不去，经过时间的洗涤，一切都会回到最初的那个时刻，还记得你上次写的令自己引以为豪的css样式吗？  😄，也许你记得，但模糊了不是？？？所以还是乖乖地拿起你的电脑，愉快地一点点敲下来，记录一遍吧！ 这篇文章会记录自己时常用到的css片段，使用这些css可以帮助我们解决许多实际问题。</p>
</blockquote>
<p><a href="https://github.com/qianlongo/cssSkills" target="_blank" rel="external">源码地址</a><br><a href="http://sandbox.runjs.cn/show/rrtvorhl" target="_blank" rel="external">预览地址</a></p>
<a id="more"></a>
<h2 id="1、清除浮动"><a href="#1、清除浮动" class="headerlink" title="1、清除浮动"></a>1、清除浮动</h2><blockquote>
<p>浮动给我们的代码带来的麻烦，想必不需要多说，我们会用很多方式来避免这种麻烦，其中我觉得最方便也是兼容性最好的一种是….</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 清除浮动</span></div><div class="line">.clearfox&#123;</div><div class="line">  <span class="attr">zoom</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">.clearfox:after&#123;</div><div class="line">  <span class="attr">display</span>: block;</div><div class="line">  content: <span class="string">''</span>;</div><div class="line">  clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、垂直水平居中"><a href="#2、垂直水平居中" class="headerlink" title="2、垂直水平居中"></a>2、垂直水平居中</h2><blockquote>
<p>在css的世界里水平居中比垂直居中来的简单一些，经过了多年的演化，依然没有好的方式来让元素垂直居中(各种方式各有优缺点，但都不能达到兼容性好，破坏力小的目标)，以下是几种常见的实现方式</p>
</blockquote>
<p><code>绝对定位方式且已知宽高</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: 50%;</div><div class="line"><span class="selector-tag">left</span>: 50%;</div><div class="line"><span class="selector-tag">margin-top</span>: <span class="selector-tag">-3em</span>;</div><div class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-7em</span>;</div><div class="line"><span class="selector-tag">width</span>: 14<span class="selector-tag">em</span>;</div><div class="line"><span class="selector-tag">height</span>: 6<span class="selector-tag">em</span>;</div></pre></td></tr></table></figure>
<p><code>绝对定位 ＋ 未知宽高 ＋ translate</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">left: 50%;</div><div class="line">top: 50%;</div><div class="line">transform: translate(-50%, -50%);</div><div class="line">//需要补充浏览器前缀</div></pre></td></tr></table></figure>
<p><code>flex 轻松搞定水平垂直居中( 未知宽高)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">display: flex;</div><div class="line">align-items: center;</div><div class="line">justify-content: center;</div></pre></td></tr></table></figure>
<h2 id="3、-文本末尾添加省略号"><a href="#3、-文本末尾添加省略号" class="headerlink" title="3、 文本末尾添加省略号"></a>3、 文本末尾添加省略号</h2><blockquote>
<p>当文本的内容超出容器的宽度的时候，我们希望在其默认添加省略号以达到提示用户内容省略显示的效果。</p>
</blockquote>
<p><code>宽度固定，适合单行显示...</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div><div class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</div><div class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</div></pre></td></tr></table></figure>
<p><code>宽度不固定，适合多行以及移动端显示</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div><div class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</div><div class="line"><span class="selector-tag">-webkit-line-clamp</span>: 3;</div><div class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</div></pre></td></tr></table></figure>
<h2 id="4、制造文本的模糊效果"><a href="#4、制造文本的模糊效果" class="headerlink" title="4、制造文本的模糊效果"></a>4、制造文本的模糊效果</h2><blockquote>
<p>当我们希望给文本制造一种模糊效果感觉的时候，可以这样做</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span>: <span class="selector-tag">transparent</span>;</div><div class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:0</span> 0 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.5</span>);</div></pre></td></tr></table></figure>
<h2 id="5、动画实现简洁loading效果"><a href="#5、动画实现简洁loading效果" class="headerlink" title="5、动画实现简洁loading效果"></a>5、动画实现简洁loading效果</h2><blockquote>
<p>我们来实现一个非常简洁的loading效果</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.loading:after&#123;</div><div class="line">  display: inline-block;</div><div class="line">  overflow: hidden;</div><div class="line">  vertical-align: bottom;</div><div class="line">  content: '\2026';</div><div class="line">  -webkit-animation: ellipsis 2s infinite;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 动画部分</div><div class="line">@-webkit-keyframes ellipsis&#123;</div><div class="line">  from&#123;</div><div class="line">    width: 2px;</div><div class="line">  &#125;</div><div class="line">  to&#123;</div><div class="line">    width: 15px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6、自定义文本选中样式"><a href="#6、自定义文本选中样式" class="headerlink" title="6、自定义文本选中样式"></a>6、自定义文本选中样式</h2><blockquote>
<p>默认情况下，我们在网页上选中文字的时候，会给选中的部分一个深蓝色背景颜色(可以自己拿起鼠标试试)，如果我们想自己定制被选中的部分的样式呢？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意只能修改这两个属性 字体颜色 选中背景颜色</span></div><div class="line"></div><div class="line">element::selection&#123;</div><div class="line">  <span class="attr">color</span>: green;</div><div class="line">  background-color: pink;</div><div class="line">&#125;</div><div class="line">element::-moz-selection&#123;</div><div class="line">  <span class="attr">color</span>: green;</div><div class="line">  background-color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7、顶角贴纸效果"><a href="#7、顶角贴纸效果" class="headerlink" title="7、顶角贴纸效果"></a>7、顶角贴纸效果</h2><blockquote>
<p>有时候我们会有这样的需求，在一个列表展示页面，有一些列表项是新添加的、或者热度比较高的，就会要求在其上面添加一个贴纸效果的小条就像hexo默认博客的fork me on github那个效果一样，如下图。<br><img src="/2016-4/20/1.png" alt="贴纸效果"></p>
</blockquote>
<p><strong>接下来我们开始一步步完成最左边的这个效果</strong></p>
<p><code>html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ribbon"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Fork me on GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>css</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/* 外层容器几本设置  */</div><div class="line">.wrap&#123;</div><div class="line">  width: 160px;</div><div class="line">  height:160px;</div><div class="line">  overflow:hidden;</div><div class="line">  position: relative;</div><div class="line">  background-color: #f3f3f3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.ribbon&#123;</div><div class="line">  background-color: #a00;</div><div class="line">  overflow: hidden;</div><div class="line">  white-space: nowrap;</div><div class="line">  position: absolute;</div><div class="line">  /* shadom */</div><div class="line">  -webkit-box-shadow: 0 0 10px #888;</div><div class="line">  -moz-box-shadow: 0 0 10px #888;</div><div class="line">  box-shadow: 0 0 10px #888;</div><div class="line">  /* rotate */</div><div class="line">  -webkit-transform: rotate(-45deg);</div><div class="line">  -moz-transform: rotate(-45deg);</div><div class="line">  -ms-transform: rotate(-45deg);</div><div class="line">  -o-transform: rotate(-45deg);</div><div class="line">  transform: rotate(-45deg);</div><div class="line">  /* position */</div><div class="line">  left: -50px;</div><div class="line">  top: 40px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.ribbon a&#123;</div><div class="line">  border: 1px solid #faa;</div><div class="line">  color: #fff;</div><div class="line">  display: block;</div><div class="line">  font: bold 81.25% &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</div><div class="line">  margin: 1px 0;</div><div class="line">  padding: 10px 50px;</div><div class="line">  text-align: center;</div><div class="line">  text-decoration: none;</div><div class="line">  /* shadow */</div><div class="line">  text-shadow: 0 0 5px #444;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8、input占位符"><a href="#8、input占位符" class="headerlink" title="8、input占位符"></a>8、input占位符</h2><blockquote>
<p>当我们给部分input类型的设置placeholder属性的时候，有的时候需要修改其默认的样式。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">input::-webkit-input-placeholder&#123;</div><div class="line">  color: green;</div><div class="line">  background-color: #F9F7F7;</div><div class="line">  font-size: 14px;</div><div class="line">&#125;</div><div class="line">input::-moz-input-placeholder&#123;</div><div class="line">  color: green;</div><div class="line">  background-color: #F9F7F7;</div><div class="line">  font-size: 14px;</div><div class="line">&#125;</div><div class="line">input::-ms-input-placeholder&#123;</div><div class="line">  color: green;</div><div class="line">  background-color: #F9F7F7;</div><div class="line">  font-size: 14px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="9、移动端可点击元素去处默认边框"><a href="#9、移动端可点击元素去处默认边框" class="headerlink" title="9、移动端可点击元素去处默认边框"></a>9、移动端可点击元素去处默认边框</h2><blockquote>
<p>在移动端浏览器上，当你点击一个链接或者通过Javascript定义的可点击元素的时候，会出现蓝色边框，说实话，这是很恶心的，怎么去掉呢?</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-tap-highlight-color: rgba(255,255,255,0);</div></pre></td></tr></table></figure>
<h2 id="10、首字下沉"><a href="#10、首字下沉" class="headerlink" title="10、首字下沉"></a>10、首字下沉</h2><blockquote>
<p>要实现类似word中首字下沉的效果可以使用以下代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">element:first-letter&#123;</div><div class="line">  float:left;</div><div class="line">  color:green;</div><div class="line">  font-size:30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="11、小三角"><a href="#11、小三角" class="headerlink" title="11、小三角"></a>11、小三角</h2><blockquote>
<p>在很多地方我们可以用得上小三角，接下来我们画一下四个方向的三角形</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.triangle&#123;</div><div class="line">  /* 基础样式 */</div><div class="line">  border:solid 10px transparent;</div><div class="line">&#125;</div><div class="line">/*下*/</div><div class="line">.triangle.bottom&#123;</div><div class="line"> border-top-color: green;</div><div class="line">&#125;</div><div class="line">/*上*/</div><div class="line">.triangle.top&#123;</div><div class="line"> border-bottom-color: green;</div><div class="line">&#125;</div><div class="line">/*左*/</div><div class="line">.triangle.top&#123;</div><div class="line"> border-right-color: green;</div><div class="line">&#125;</div><div class="line">/*右*/</div><div class="line">.triangle.top&#123;</div><div class="line"> border-left-color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>可以看出画一个小三角非常简单，只要两行样式就可以搞定，对于方向只要想着画哪个方向则设置反方向的样式属性就可以</strong></p>
<h2 id="12、鼠标手型"><a href="#12、鼠标手型" class="headerlink" title="12、鼠标手型"></a>12、鼠标手型</h2><blockquote>
<p>一般情况下，我们希望在以下元素身上添加鼠标手型</p>
</blockquote>
<ul>
<li>a</li>
<li>submit</li>
<li>input[type=”iamge”]</li>
<li>input[type=”button”]</li>
<li>button</li>
<li>label</li>
<li>select</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a[href],input[type=&apos;submit&apos;], input[type=&apos;image&apos;],input[type=&apos;button&apos;], label[for], select, button &#123;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="13、屏蔽Webkit移动浏览器中元素高亮效果"><a href="#13、屏蔽Webkit移动浏览器中元素高亮效果" class="headerlink" title="13、屏蔽Webkit移动浏览器中元素高亮效果"></a>13、屏蔽Webkit移动浏览器中元素高亮效果</h2><blockquote>
<p>在访问移动网站时，你会发现，在选中的元素周围会出现一些灰色的框框，使用以下代码屏蔽这种样式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout: none;</div><div class="line">-webkit-user-select: none;</div><div class="line">-khtml-user-select: none;</div><div class="line">-moz-user-select: none;</div><div class="line">-ms-user-select: none;</div><div class="line">user-select: none;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转jade]]></title>
      <url>https://qianlongo.github.io/2016/04/16/jade%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>接触过一些不同种类的前端模版引擎 <code>Mustache</code> <code>ejs</code> <code>mustache</code> <code>coffeecup</code>…,大体上这些引擎都有相似的语法和功能，本质上都是通过弥补html与生俱来的缺陷，比如在模版种使用变量，循环，条件判断等加快应用的开发，本文要介绍的<code>jade</code>与上述模版引擎有些许不同，他是采用缩进的形式来组织html的。</p>
</blockquote>
<a id="more"></a>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote>
<p>这篇文章默认你已经知道用”-“开头可以声明js变量与使用js语句,使用#{name}获取name变量的值, 文本在标签后空一个空格。</p>
</blockquote>
<h2 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h2><blockquote>
<p>jade中默认一行中的第一个单词就是标签名称，如果不写标签名则默认创建一个div</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.tag#tag</div><div class="line">  ul.list</div><div class="line">    li item1</div><div class="line">    li item2</div><div class="line">    li item3</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;wrap&quot; class=&quot;wrap&quot;&gt;</div><div class="line">  &lt;ul class=&quot;list&quot;&gt;</div><div class="line">    &lt;li&gt;item1&lt;/li&gt;</div><div class="line">    &lt;li&gt;item2&lt;/li&gt;</div><div class="line">    &lt;li&gt;item3&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="2-属性"><a href="#2-属性" class="headerlink" title="2. 属性"></a>2. 属性</h2><blockquote>
<p>一般我们需要在标签上面挂载一些属性，jade中标签的属性放在()中，多个属性之间使用<strong>,</strong>逗号隔开</p>
</blockquote>
<h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a(href=&quot;google.com&quot;) google.com</div><div class="line">a(class=&quot;button&quot;, href=&quot;google.com&quot;) google.com</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;google.com&quot;&gt;google.com&lt;/a&gt;</div><div class="line">&lt;a href=&quot;google.com&quot; class=&quot;button&quot;&gt;google.com&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-模版中夹杂js语句"><a href="#2-2-模版中夹杂js语句" class="headerlink" title="2.2 模版中夹杂js语句"></a>2.2 模版中夹杂js语句</h3><blockquote>
<p>当然了绝大多的js语句是可以模版中运行的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- var test = true; // 这里的test只要 弱为真即可( 注意前面的-符号 )</div><div class="line">a(href=test ? &apos;google.com&apos;: &apos;baidu.com&apos;) js语句</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;google.com&quot;&gt;js语句&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-多个属性"><a href="#2-2-多个属性" class="headerlink" title="2.2 多个属性"></a>2.2 多个属性</h3><blockquote>
<p>想象一下，当你要给标签上面挂载多个属性的时候，全部写在一行必然不是什么好玩的事情，于是我们可以像下面这样写</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input(</div><div class="line">  type=&quot;checkbox&quot;,</div><div class="line">  name= &quot;qianlong&quot;,</div><div class="line">  checked </div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;checkbox&quot; name=&quot;qianlong&quot; checked /&gt;</div></pre></td></tr></table></figure>
<h3 id="2-3-boolean类型属性"><a href="#2-3-boolean类型属性" class="headerlink" title="2.3 boolean类型属性"></a>2.3 boolean类型属性</h3><p>&gt;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">input(type=&quot;checkbox&quot;, checked )</div><div class="line">input(type=&quot;checkbox&quot;, checked=true )</div><div class="line">input(type=&quot;checkbox&quot;, checked=false )</div><div class="line">input(type=&quot;checkbox&quot;, checked=true &amp;&amp; &apos;checked&apos; )</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;checkbox&quot; checked&gt;</div><div class="line">&lt;input type=&quot;checkbox&quot; checked&gt;</div><div class="line">&lt;input type=&quot;checkbox&quot;&gt;</div><div class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="2-4-style-书写行间样式"><a href="#2-4-style-书写行间样式" class="headerlink" title="2.4 style 书写行间样式"></a>2.4 style 书写行间样式</h3><blockquote>
<p>当我们要在行间给一个元素单独的设置一段样式的时候，应该怎么做呢？直接给style属性赋值一段js对象即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- styles = &#123;color: &apos;red&apos;, background: &apos;green&apos;&#125; </div><div class="line">a(href=&quot;google.com&quot;, style=styles) google.com</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;google.com&quot; style=&quot;color:red;background:green&quot;&gt;google.com&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="2-5-单独添加class属性"><a href="#2-5-单独添加class属性" class="headerlink" title="2.5 单独添加class属性"></a>2.5 单独添加class属性</h3><blockquote>
<p>前面在tag章节我们讲过可以通过.className的形式添加class，这里我们也可以把类当成是某个属性来书写，并且可以把一个数组直接赋值给class属性，亦可以是个对象类型的条件判断赋值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var classes = [&apos;qianlong&apos;, &apos;tianxiang&apos;, &apos;doubi&apos;];</div><div class="line">- var objTest = false;</div><div class="line"></div><div class="line">a(class=classes, href=&quot;google.com&quot;) google.com</div><div class="line">// 这里结合.className的形式</div><div class="line">a.firstName.qianlong(class=classes, class=&quot;firstName&quot;, href=&quot;google.com&quot;) google.com</div><div class="line">// 对象形式</div><div class="line">a(class=&#123;&apos;active&apos;: objTest&#125;, href=&quot;google.com&quot;) google.com</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;google.com&quot; class=&quot;qianlong tianxiang doubi&quot;&gt;google.com&lt;/a&gt;</div><div class="line">&lt;a href=&quot;google.com&quot; class=&quot;firstName qianlong qianlong tianxiang doubi firstName&quot;&gt;google.com&lt;/a&gt;</div><div class="line">&lt;a href=&quot;google.com&quot; class=&quot;active&quot;&gt;google.com&lt;/a&gt;</div></pre></td></tr></table></figure>
<p><strong>1. 可以看出当我们同时使用.className和属性书写的形式并且两者有相同的类名的时候，jade并不会非常智能地给我们只留下一下一个类，而是重复相同的类名多次</strong></p>
<p><strong>2. 我们可以利用使用对象类型添加class的方式来给不同的元素添加不同的类</strong></p>
<h2 id="3-循环each-amp-amp-条件判断-if"><a href="#3-循环each-amp-amp-条件判断-if" class="headerlink" title="3. 循环each &amp;&amp; 条件判断 if"></a>3. 循环each &amp;&amp; 条件判断 if</h2><blockquote>
<p>在模版引擎中除了使用变量动态的获取我们需要的数据，很多时候我们做的事是根据数据<strong>循环</strong>生成dom元素以及根据<strong>条件判断</strong>来涮选数据，很幸运jade给我们提供了这样的机制</p>
</blockquote>
<h2 id="3-1-each-for"><a href="#3-1-each-for" class="headerlink" title="3.1 each || for"></a>3.1 each || for</h2><blockquote>
<p>我们可以通过each和js中的for语句来根据数据循环生成dom结构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var list = [&apos;qianlong&apos;, &apos;tianxiang&apos;, &apos;doubi&apos;];</div><div class="line"></div><div class="line">ul.list1</div><div class="line">  each val, index in list</div><div class="line">    li 值是:#&#123;val&#125; 索引是: #&#123;index&#125;  </div><div class="line">ul.list2</div><div class="line">  - for(var i = 0, len = list.length; i &lt; len; i++)</div><div class="line">    li 值是:#&#123;list[i]&#125; 索引是: #&#123;i&#125;</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list1&quot;&gt;</div><div class="line">  &lt;li&gt;值是:qianlong 索引是: 0  &lt;/li&gt;</div><div class="line">  &lt;li&gt;值是:tianxiang 索引是: 1  &lt;/li&gt;</div><div class="line">  &lt;li&gt;值是:doubi 索引是: 2  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;ul class=&quot;list2&quot;&gt;</div><div class="line">  &lt;li&gt;值是:qianlong 索引是: 0  &lt;/li&gt;</div><div class="line">  &lt;li&gt;值是:tianxiang 索引是: 1  &lt;/li&gt;</div><div class="line">  &lt;li&gt;值是:doubi 索引是: 2  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p><strong>可见两种方式都可以达到相同的遍历效果，但是后者代码量较大稍显繁琐，推荐使用第一种方式</strong></p>
<h2 id="3-2-if"><a href="#3-2-if" class="headerlink" title="3.2 if"></a>3.2 if</h2><blockquote>
<p>通过if关键字来进行条件判断</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- var ifTest = 0;</div><div class="line">  if ifTest &gt; 10</div><div class="line">    p ifTest 大于10    </div><div class="line">  else if ifTest == 10</div><div class="line">    p ifTest 等于10</div><div class="line">  else</div><div class="line">    p ifTest 小于10</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;ifTest 小于10   &lt;/p&gt;</div></pre></td></tr></table></figure>
<h2 id="4-case-vs-switch"><a href="#4-case-vs-switch" class="headerlink" title="4. case vs switch"></a>4. case vs switch</h2><blockquote>
<p>在jade模版里面我们通过case、when和default关键字可以实现类似于编程语句中switch的效果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var friends = 10;</div><div class="line">case friends</div><div class="line">  when 0</div><div class="line">    p you have no friends</div><div class="line">  when 1</div><div class="line">    p you have a friends</div><div class="line">  default</div><div class="line">    p you have #&#123;friends&#125; friends</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;you have 10 friends&lt;/p&gt;</div></pre></td></tr></table></figure>
<p><strong>可见当when中没有与之相匹配的项时，会走默认的default,接下来我们来看一下这几种情形</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- var friends = 0;</div><div class="line">case friends</div><div class="line">  when 0</div><div class="line">  when 1</div><div class="line">    p you have a friends</div><div class="line">  default</div><div class="line">    p you have #&#123;friends&#125; friends</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;you have a friends&lt;/p&gt;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var friends = 1;</div><div class="line">case friends</div><div class="line">  when 0</div><div class="line">    p you have no friends</div><div class="line">  when 1</div><div class="line">    p you have a friends</div><div class="line">  default</div><div class="line">    p you have #&#123;friends&#125; friends</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;you have a friends&lt;/p&gt;</div></pre></td></tr></table></figure>
<h2 id="5-extends"><a href="#5-extends" class="headerlink" title="5. extends"></a>5. extends</h2><blockquote>
<p>在构建应用的过程中，我们可能需要扩展自己，以弥补自己的不足。这时候便可以能用到<strong>extends</strong></p>
</blockquote>
<p><code>layout.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    block title</div><div class="line">  body</div><div class="line">    block content</div></pre></td></tr></table></figure>
<p><code>main.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">extends ./layout.jade</div><div class="line"></div><div class="line">block title</div><div class="line">  title 我是main title</div><div class="line">block content</div><div class="line">  .content 我是main中的content部分</div></pre></td></tr></table></figure>
<p>最终main.jade编译后dom结构是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;我是main title&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div class=&quot;content&quot;&gt;我是main中的content部分  &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong>这里就好像是在layout.jade中先埋好title和content这两个坑，然后在main.jade中把这两个坑给填上了，并且也继承了layout.jade的dom结构</strong></p>
<h2 id="6-include"><a href="#6-include" class="headerlink" title="6. include"></a>6. include</h2><blockquote>
<p>一张网页的很多模块是公用的比如头部和尾部，我们可以将这些可以复用的部分作为单独的模块，然后被他页面的嵌入，在jade要实现这种效果用的是include关键字</p>
</blockquote>
<p><code>head.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">head</div><div class="line">  title 我是head部分</div><div class="line">  link(rel=&quot;stylesheet&quot;, type=&quot;text/css&quot;, href=&quot;../styles/index.css&quot;)</div></pre></td></tr></table></figure>
<p><code>footer.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#footer 我是footer部分</div></pre></td></tr></table></figure>
<p><code>index.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  include ./header.jade</div><div class="line">  body</div><div class="line">  #main 我是主题部分</div><div class="line">  include ./footer.jade</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">  &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">      &lt;title&gt;我是head部分&lt;/title&gt;</div><div class="line">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../styles/index.css&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">      &lt;div id=&quot;main&quot;&gt;我是主题部分&lt;/div&gt;</div><div class="line">      &lt;div id=&quot;footer&quot;&gt;我是footer部分&lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">  &lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong>怎么样，是不是有当前使用jsp include的那种感觉，别着急include的强大之处并不仅仅是引进<code>.jade</code>类型的文件，他还可以引进类似<code>.css``.js</code>等的文件</strong></p>
<p><code>index.css</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">  background-color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>index.jade</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title include test</div><div class="line">    style</div><div class="line">      include ../public/styles/index.css</div><div class="line">  body</div><div class="line">    #main 我是主题部分</div></pre></td></tr></table></figure>
<p><strong>编译后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;include test&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">      body&#123;</div><div class="line">        background-color: green;</div><div class="line">      &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;main&quot;&gt;我是主题部分&lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>jade还有其他相关的语法，日常工作中需要我们常用的结合上述所说灵活使用</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://jade-lang.com/" target="_blank" rel="external">jade官网</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端性能优化之DOM篇章]]></title>
      <url>https://qianlongo.github.io/2016/04/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BDOM%E7%AF%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前端经常需要和DOM打交道，增加、删除、替换是常见的DOM操作，然而就是这些操作时常成为网站性能的瓶颈，为了提高我们的网站性能，我们需要在DOM上面花不少心思。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-使用DOM的引用"><a href="#1-使用DOM的引用" class="headerlink" title="1.  使用DOM的引用"></a>1.  使用DOM的引用</h2><blockquote>
<p>在进行DOM操作前，我们先要对元素进行查找，或者需要根据后台返回的数据动态的创建元素，比如我们得到一个数组类型的数据data，需求是根据data往一个id为main的元素中添加li。我们可能会进行下面的DOM操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++ )&#123;</div><div class="line">  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">  li.innerText = data[i];</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>).appendChild(li);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>上面的代码每次循环都会去计算一个data的length值，查询并得到main元素，可想而之其效率应该有多低下，好的方式是在进行循环之前便将data的length以及main元素缓存下来，在循环的时候使用其引用即可。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oMain = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line"><span class="keyword">var</span> len = data.length;</div><div class="line"><span class="keyword">var</span> i,li;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++ )&#123;</div><div class="line">  li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">  li.innerText = data[i];</div><div class="line">  oMain.appendChild(li);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意元素的查找默认根元素是document，当我们需要对某些元素进行频繁的查找的时候，可以先将某个元素缓存下来，后面的元素查找则是基于该元素，从而减短查找路径</strong></p>
<h2 id="2-使用文档碎片"><a href="#2-使用文档碎片" class="headerlink" title="2.  使用文档碎片"></a>2.  使用文档碎片</h2><blockquote>
<p>上面的操作中还有一个非常耗费性能的地方，<code>oMain.appendChild(li)</code>，每次循环都会进行一次元素添加操作，进而导致浏览器重排，我们知道浏览器的重排和重绘是需要耗费大量的时间进行的，所以提高网页性能的一方面是考虑尽量减少重排和重绘的次数。将频繁的DOM操作先在内存中完成，最后一次性将节点推进页面当中，这里我们会用到一个方法<code>document.createDocumentFragment</code>,重新修改上诉例子如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oMain = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment </div><div class="line"><span class="keyword">var</span> len = data.length;</div><div class="line"><span class="keyword">var</span> i,li;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++ )&#123;</div><div class="line">  li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">  li.innerText = data[i];</div><div class="line">  frag.appendChild(li); <span class="comment">// 所有的操作在内存中完成，这个时候不会触发重排</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">oMain.appendChild(frag); <span class="comment">// 最后一次性添加到页面中，只出发浏览器一次重排</span></div></pre></td></tr></table></figure>
<h2 id="3-使用innerHTML一次性添加DOM节点"><a href="#3-使用innerHTML一次性添加DOM节点" class="headerlink" title="3. 使用innerHTML一次性添加DOM节点"></a>3. 使用innerHTML一次性添加DOM节点</h2><blockquote>
<p>以上的代码中每次都要通过<code>document.createElement(&#39;li&#39;)</code>创建元素，通过<code>li.innerText = data[i]</code>设置文本信息，蛋疼的很，我们可以尝试着使用innerHTML来一次性添加元素，当然前提是你要先以字符串的形式把元素和数据拼接好</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oMain = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line"><span class="keyword">var</span> sHtml = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> len = data.length;</div><div class="line"><span class="keyword">var</span> i,li;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++ )&#123;</div><div class="line">  sHtml += <span class="string">'&lt;li&gt;'</span>+ data[i] +<span class="string">'&lt;/li&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">oMain.innerHTMl = sHtml; <span class="comment">// 最后一次性添加到页面中，只出发浏览器一次重排</span></div></pre></td></tr></table></figure>
<p><strong>虽然这样做效率有所提升，但是当页面的DOM结构一旦复杂起来，拼接字符串便会变成一件相当恶心的事情</strong></p>
<h2 id="4-使用事件代理批量处理事件"><a href="#4-使用事件代理批量处理事件" class="headerlink" title="4. 使用事件代理批量处理事件"></a>4. 使用事件代理批量处理事件</h2><blockquote>
<p>事件代理本质上就是将原本自己该干的事情，委托给别人( 这里是指父节点或者祖先节点 )做。<br><strong>还是用上面的例子，假设我们现在要给每个li都添加上一个点击事件，可能会写出下面的代码</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oMain = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment </div><div class="line"><span class="keyword">var</span> len = data.length;</div><div class="line"><span class="keyword">var</span> i,li;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++ )&#123;</div><div class="line">  li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">  li.innerText = data[i];</div><div class="line">  li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;,<span class="literal">false</span>)</div><div class="line">  frag.appendChild(li); </div><div class="line">&#125;</div><div class="line"></div><div class="line">oMain.appendChild(frag);</div></pre></td></tr></table></figure>
<p><strong>很显然data的lenth有多大，循环就得执行多少次addEventListener这个函数多少次，当数据量很大的时候效率自然低了不少，所以我们可以尝试使用事件代理的形式将事件委托到main元素上</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oMain = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line"><span class="keyword">var</span> sHtml = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> len = data.length;</div><div class="line"><span class="keyword">var</span> i,li,target;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++ )&#123;</div><div class="line">  sHtml += <span class="string">'&lt;li&gt;'</span>+ data[i] +<span class="string">'&lt;/li&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">oMain.innerHTMl = sHtml; <span class="comment">// 最后一次性添加到页面中，只出发浏览器一次重排</span></div><div class="line">oMain.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">  target = ev.target || ev.srcElement;</div><div class="line">  <span class="keyword">if</span>(target.tagName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h2 id="5-通过className来批量修改元素样式"><a href="#5-通过className来批量修改元素样式" class="headerlink" title="5. 通过className来批量修改元素样式"></a>5. 通过className来批量修改元素样式</h2><blockquote>
<p>经常有这样的场景，我们需要在js中批量的修改元素的样式，比如</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ele.style.width = <span class="number">100</span> + <span class="string">'px'</span>;</div><div class="line">ele.style.height = <span class="number">100</span> + <span class="string">'px'</span>;</div><div class="line">ele.style.backgrounfColor = <span class="string">'red'</span>;</div><div class="line">ele.style.border = <span class="string">'solid 1px green'</span>;</div></pre></td></tr></table></figure>
<p><strong>以上代码会多次出发浏览器重绘和重排，一种好的方式是将需要修改的样式在样式文件中先写好，通过给元素赋值className的形式批量修改样式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.active&#123;</div><div class="line">  <span class="attr">width</span>: <span class="number">100</span>px;</div><div class="line">  height: <span class="number">100</span>px;</div><div class="line">  backgroung-color: red;</div><div class="line">  border: solid <span class="number">1</span>px green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>给元素赋值className</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ele.className += <span class="string">' active'</span>; <span class="comment">// 注意前面的空格</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dragToSort记一次排序组件开发]]></title>
      <url>https://qianlongo.github.io/2016/04/03/dragToSort%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%92%E5%BA%8F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>有这么一种人，很多地方都会需要他，有这么一种人他一辈子只做一件事，并且做的足够好，在任何地方都能落地生根，服务大众。比如说保洁阿姨，也就是说这里<strong>被需求</strong>的它是大众化的，可被抽象化的，如果我们用程序中的专有名词来形容可以为<strong>组件</strong>,组件的存在就是干<strong>一件事</strong>，有自己存在的目标( <strong>意义</strong> ),有自己的<strong>行为</strong>，自己的<strong>动作</strong>,甚至这里的组件是可以被调用者配置的，就好像保洁阿姨是可以被公司分配到不同的工作地点，薪资也是可配置的。这篇文章就是讲如何将一个组件从0到1的过程( 注意暂时这个组件不会涉及到<strong>配置部分</strong> )</p>
</blockquote>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p><a href="https://github.com/qianlongo/components/tree/master/DragToSort" target="_blank" rel="external">源码地址</a></p>
<p><a href="http://sandbox.runjs.cn/show/yzi77cjc" target="_blank" rel="external">提前感受1</a><br><a href="http://sandbox.runjs.cn/show/yjqcgiun" target="_blank" rel="external">提前感受2</a></p>
<p>你可以点击上面的两个链接提前感受一下这个插件可能要完成的功能，以及点击源码地址查看源代码。其实非常的平常，他要做的事就是允许用户通过鼠标拖拽来改变页面上某些<strong>元素的位置</strong>，从而完成类似排序的功能</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>先引入dragToSort.js文件</p>
<ol>
<li>每个组件都有自己的html结构，所以需要遵循以下的html结构</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;dragWrap&quot; class=&quot;clear&quot;&gt;</div><div class="line">  &lt;!--将要拖拽的元素放到#dragWrap中  作为他的子元素--&gt;</div><div class="line">  ...</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ol>
<li>调用 以下两句代码既可以完成以上所诉需求</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var dragTS = new DragToSort();</div><div class="line">    dragTS.init();</div></pre></td></tr></table></figure>
<h2 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h2><blockquote>
<p>插件以面向对象的形式完成，构造函数内部有一些原型上需要用到的一些数据，挂在到原型上面的方法完成插件的主要功能。</p>
</blockquote>
<p><strong>构造函数</strong></p>
<blockquote>
<p>构造函数 主要存储插件方法中需要用到的数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function DragToSort() &#123;</div><div class="line">  var parent = document.getElementById(&apos;dragWrap&apos;);</div><div class="line">  this.eles = [].slice.call(parent.children);</div><div class="line">  this.elesPos = this.getPos();</div><div class="line">  this.iZIndex = 2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>原型</strong><br>&gt;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">DragToSort.prototype = &#123;</div><div class="line">  constructor: DragToSort, // 重新指向DragToSort</div><div class="line">  init: function  () &#123;</div><div class="line">   //初始化</div><div class="line">  &#125;,</div><div class="line">  getPos: function  () &#123;</div><div class="line">    // 得到需要拖拉排序的位置信息</div><div class="line">  &#125;,</div><div class="line">  css: function  () &#123;</div><div class="line">   // 简易的样式操作函数</div><div class="line">  &#125;,</div><div class="line">  getStyle: function () &#123;</div><div class="line">   // 获取元素的行间样式 封装</div><div class="line">  &#125;,</div><div class="line">  startMove: function ()&#123;</div><div class="line">   // 动画函数封装 用来给拖拽添加动画效果</div><div class="line">  &#125;,</div><div class="line">  setPos: function  () &#123;</div><div class="line">   // 定位转换函数 因初始情况下元素是浮动布局，但是这里的插件要完成的功能需要元素定位( 绝对定位 )</div><div class="line">  &#125;,</div><div class="line">  crash: function  () &#123;</div><div class="line">    // 检查两个物体是否发生碰撞</div><div class="line">  &#125;,</div><div class="line">  distance : function  () &#123;</div><div class="line">   // 计算两个物体之间的距离</div><div class="line">  &#125;,</div><div class="line">  nearObj : function  () &#123;</div><div class="line">   // 寻找与当前拖拽元素相碰正的元素中最近的元素</div><div class="line">  &#125;,</div><div class="line">  drag : function  () &#123;</div><div class="line">   //  拖拽函数封装</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>接下来开始详细解释各段代码</strong></p>
<p><strong>getPos</strong></p>
<blockquote>
<p>通过对需要拖拽的元素，进行遍历，用数组将其位置信息存储起来，并给每个元素设置一个初始的索引值(为什么要用到索引值，后面会说到)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function ()&#123;</div><div class="line">  var pos = [];</div><div class="line">  this.eles.forEach( function  (item ,index) &#123;</div><div class="line">    pos.push(&#123;</div><div class="line">      left : item.offsetLeft,</div><div class="line">      top : item.offsetTop</div><div class="line">    &#125;)</div><div class="line">    item.index = index;</div><div class="line">  &#125;)</div><div class="line">  return pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>css</strong></p>
<blockquote>
<p>设置元素样式的的简易函数封装,接受一个元素对象，和设置css样式的对象</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function  (objEle, obj) &#123;</div><div class="line">  for(var attr in obj)&#123;</div><div class="line">    objEle[&apos;style&apos;][attr] = obj[attr];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>getStyle</strong></p>
<blockquote>
<p>获取元素样式兼容函数封装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function (obj, attr) &#123;</div><div class="line">  if (obj.currentStyle) &#123;</div><div class="line">   return obj.currentStyle[attr]; // chrome ie ...</div><div class="line">  &#125;else&#123;</div><div class="line">   return getComputedStyle(obj, false)[attr]; // firefox ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>startMove</strong></p>
<blockquote>
<p>动画函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function (obj, json, fnEnd)&#123;</div><div class="line">  var _this = this;</div><div class="line">  clearInterval(obj.timer);</div><div class="line">  obj.timer=setInterval(function ()&#123;</div><div class="line">    var bStop=true;</div><div class="line">    for(var attr in json)&#123;</div><div class="line">       var cur=0;</div><div class="line">       if(attr==&apos;opacity&apos;)&#123;</div><div class="line">          cur=Math.round(parseFloat(_this.getStyle(obj, attr))*100);</div><div class="line">       &#125;else&#123;</div><div class="line">          cur=parseInt(_this.getStyle(obj, attr));</div><div class="line">       &#125;</div><div class="line">       var speed=(json[attr]-cur)/6;</div><div class="line">       speed=speed&gt;0?Math.ceil(speed):Math.floor(speed);</div><div class="line"></div><div class="line">       if(cur!=json[attr])&#123;</div><div class="line">          bStop=false;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if(attr==&apos;opacity&apos;)&#123;</div><div class="line">          obj.style.filter=&apos;alpha(opacity:&apos;+(cur+speed)+&apos;)&apos;;</div><div class="line">          obj.style.opacity=(cur+speed)/100;</div><div class="line">        &#125;else&#123;</div><div class="line">          obj.style[attr]=cur+speed+&apos;px&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if(bStop)&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        if(fnEnd)fnEnd();</div><div class="line">    &#125;</div><div class="line">  &#125;, 30);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>setPos</strong></p>
<blockquote>
<p>将浮动布局转化为定位布局</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function  () &#123;</div><div class="line">  //定位转换 absolute</div><div class="line">  var _this = this;</div><div class="line">  _this.eles.forEach( function  (item,index) &#123;</div><div class="line">    _this.css(item,&#123;</div><div class="line">      position : &apos;absolute&apos;,</div><div class="line">      left : _this.elesPos[index][&apos;left&apos;] + &apos;px&apos;,</div><div class="line">      top :  _this.elesPos[index][&apos;top&apos;] + &apos;px&apos;,</div><div class="line">      margin : 0</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>crash</strong></p>
<blockquote>
<p>检查两个物体是否发生碰撞，要检查两个物体是否发生碰撞，值需要检查它们的位置关系就可以，也就是两物体没有重叠区域。如图，另一个物体处于红色圆圈位置便不会发生碰撞，反之</p>
</blockquote>
<p><img src="/2016-4/3/6.png" alt="困"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function  (obj, obj2) &#123;</div><div class="line">  //检查两个物体是否发生碰撞</div><div class="line">  // obj1</div><div class="line">  var t1 = obj.offsetTop;</div><div class="line">  var l1 = obj.offsetLeft;</div><div class="line">  var b1 = obj.offsetHeight + t1;</div><div class="line">  var r1 = obj.offsetWidth + l1;</div><div class="line">  // obj2</div><div class="line">  var t2 = obj2.offsetTop;</div><div class="line">  var l2 = obj2.offsetLeft;</div><div class="line">  var b2 = obj2.offsetHeight + t2;</div><div class="line">  var r2 = obj2.offsetWidth + l2;</div><div class="line">  //检查</div><div class="line">  if( r1&lt;l2 || r2&lt;l1 || b1&lt;t2 || b2&lt;t1 )&#123;</div><div class="line">    return false;//未碰撞</div><div class="line">  &#125;else&#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初识js面向对象]]></title>
      <url>https://qianlongo.github.io/2016/04/03/%E5%88%9D%E8%AF%86js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p><strong>基于类的对象：</strong>我们都知道面向对象的语言中有一个明显的标志，就是都有类的概念，通过类这个类似模板的东西我们可以创建许多个具有相同的属性和方法的对象。然而在ECMAScript中并没有类的概念，自然它与基于类的语言中的对象也会有所不同。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>js中的对象：**</strong>无序**的属性的集合，属性可以包含基本值、对象、函数。即js中的对象是一组没有特定顺序的值，对象的每个属性或者方法都有一个自己的名字，而每个名字都与一个值相对应。</p>
</blockquote>
<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><h3 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h3><blockquote>
<p>1 创建一个对象的最简单的方式是创建一个Object实例,之后为其添加属性和方法。</p>
</blockquote>
<p><strong>例如</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var person = new Object();</div><div class="line">    person.name = &apos;谦龙&apos;;</div><div class="line">    person.sex = &apos;男&apos;;</div><div class="line">    person.sayNameAndSex = function()&#123;</div><div class="line">        console.log(this.name, this.sex);</div><div class="line">    &#125;</div><div class="line">    person.sayNameAndSex(); // 谦龙 男</div></pre></td></tr></table></figure>
<blockquote>
<p>2  使用对象字面量形式</p>
</blockquote>
<p><strong>例如</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name:&apos;谦龙&apos;,</div><div class="line">    sex:&apos;男&apos;,</div><div class="line">    sayNameAndSex:function()&#123;</div><div class="line">        console.log(this.name, this.sex)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> person.sayNameAndSex(); // 谦龙 男</div></pre></td></tr></table></figure>
<h3 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h3><blockquote>
<p>ECMAScript有两种数据属性：数据属性和访问器属性。</p>
</blockquote>
<h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><blockquote>
<p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。共有四个描述其行为的特性。</p>
</blockquote>
<p> 1.[[Configurable]]:表示能否通过delete删除属性从而重新定义属性…默认值为true<br> 2.[[Enumerable]]:表示能否通过for in 循环返回属性…默认为true<br> 3.[[Writable]]:表示能否修改属性的值…默认为true<br> 4.[[Value]]:表示这个属性的值.默认为undefined</p>
<p><strong>要修改属性默认的特性，必须使用ES5的Object.defineProperty()方法，而该方法接收三个参数：属性所在的对象、属性的名称、还有一个描述属性特性的对象(configurable、enumerable、writable、value)，设置其中的一个或者多个值可以修改对应的特性</strong></p>
<p><strong>DEMO</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var person = &#123;&#125;;</div><div class="line">Object.defineProperty(person, &apos;name&apos;,&#123;</div><div class="line">    configurable:false,//表示不允许通过delete删除属性</div><div class="line">    writable:false,//表示不允许重写</div><div class="line">    ennumerable:false,//表示不允许通过for in遍历</div><div class="line">    value:&apos;谦龙&apos;//设置该对象中属性的值</div><div class="line">&#125;)</div><div class="line">person.name = &apos;谦龙2&apos;;//尝试重新设置  结果不生效</div><div class="line">delete  person.name;//尝试删除  结果不生效</div><div class="line"></div><div class="line">for(var attr in person)&#123;</div><div class="line">    console.log(person[attr]);// false</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(person.name);//谦龙</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>将<strong>configurable</strong>设置为false后 不允许再次修改为true，另外在调用Object.defineProperty()方法的时候，configurable、ennumerable、writable默认值为false。</p>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><blockquote>
<p>访问器属性不包含数据值，它们包含一对getter、setter函数(但是这两个函数并不是必须的)在读取访问器属性的时候，会调用getter函数，这个函数是负责返回有效的值，在写入访问器属性的时候会调用setter函数并传入新值，这个函数负责如何处理数据。</p>
</blockquote>
<p><strong>访问器属性具有如下的特性</strong></p>
<ol>
<li>[[configurable]] 表示能否通过delete来删除属性从而定义新的属性</li>
<li>[[enumerable]] 表示能否通过for in循环来遍历返回属性</li>
<li>[[get]] 在读取属性时候调用的函数，默认为undefined</li>
<li>[[set]] 在写入函数的时候调用的函数，默认的值为undefined</li>
</ol>
<p><strong>注意：</strong>访问器属性不能直接定义，必须通过Object.defineProterty()定义<br><strong>DEMO</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var book=&#123;</div><div class="line">  _year:2015, //这里的下划线是常见的记号，表示只能通过对象的方法才能访问的属性</div><div class="line">  edition:1</div><div class="line">&#125;</div><div class="line"></div><div class="line">Object.defineProperty(book, &apos;year&apos;,&#123;</div><div class="line">    get:function()&#123;</div><div class="line">        return this._year; //即默认通过 book.year获取值的时候 返回的是 boot._year的值</div><div class="line">    &#125;,</div><div class="line">    set: function (value) &#123;//在对 boot.year设置值的时候 默认调用的方法 对数据进行处理</div><div class="line">        var _year = this._year;</div><div class="line">        if(value &gt; _year)&#123;</div><div class="line">            this._year = value;</div><div class="line">            this.edition += value - _year;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">book.year = 2016;</div><div class="line">console.log(book.year,book.edition); // 2016  2</div></pre></td></tr></table></figure>
<h4 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h4><blockquote>
<p>我们可以通过ES5中的Object.defineProperties()方法来给对象添加多个属性，该方法接受两个<strong>对象</strong>参数,第一个参数是要添加和修改其属性的对象，第二个对象的属性和第一个对象中要添加和修改的属性一一对应。</p>
</blockquote>
<p><strong>DEMO</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var book = &#123;&#125;;</div><div class="line">    Object.defineProperties(book,&#123;</div><div class="line">        _year:&#123;</div><div class="line">            value:2015,</div><div class="line">            writable:true //注意这里设置成true 才可以 &quot;写&quot; 默认是false </div><div class="line">        &#125;,</div><div class="line">        edition:&#123;</div><div class="line">            value:1,</div><div class="line">            writable:true //注意这里设置成true 才可以 &quot;写&quot; 默认是false</div><div class="line">        &#125;,</div><div class="line">        year:&#123;</div><div class="line">            get:function()&#123;</div><div class="line">                return this._year;</div><div class="line">            &#125;,</div><div class="line">            set: function (value) &#123;</div><div class="line">                var _year=this._year;</div><div class="line">                if(value &gt; _year)&#123;</div><div class="line">                    this._year=value;</div><div class="line">                    this.edition+=value-_year;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    book.year = 2016;</div><div class="line">    console.log(book.year,book.edition); // 2016 2</div></pre></td></tr></table></figure>
<h4 id="读取对象属性的特性"><a href="#读取对象属性的特性" class="headerlink" title="读取对象属性的特性"></a>读取对象属性的特性</h4><blockquote>
<p>使用ES5中的Object.getOwnPropertyDescriptor()方法，可以去的给定的属性的描述符。<br>该方法接收两个参数：属性所在的对象和要读取描述符的属性名称。返回的是一个对象，如果是数据属性，则返回的属性有 configurable,enumerable,writable,value.如果是访问器属性则返回的属性有 configurable,enumerable,get,set</p>
</blockquote>
<p><strong>DEMO</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var book=&#123;&#125;;</div><div class="line">Object.defineProperties(book,&#123;</div><div class="line">    _year:&#123;</div><div class="line">        value:2015,</div><div class="line">        writable:true</div><div class="line">    &#125;,</div><div class="line">    edition:&#123;</div><div class="line">        value:1,</div><div class="line">        writable:true</div><div class="line">    &#125;,</div><div class="line">    year:&#123;</div><div class="line">        get:function()&#123;</div><div class="line">            return this._year;</div><div class="line">        &#125;,</div><div class="line">        set: function (value) &#123;</div><div class="line">            var _year = this._year;</div><div class="line">            if(value &gt; _year)&#123;</div><div class="line">                this._year = value;</div><div class="line">                this.edition += value - _year;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//对象遍历函数</div><div class="line">function showAllProperties(obj)&#123;</div><div class="line">    for(var attr in obj)&#123;</div><div class="line">        console.log(attr+&apos;:&apos;+obj[attr]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var descriptor= Object.getOwnPropertyDescriptor(book,&apos;_year&apos;);//数据属性</div><div class="line">var descriptor2= Object.getOwnPropertyDescriptor(book,&apos;year&apos;);//访问器属性</div><div class="line">showAllProperties(descriptor);</div><div class="line">console.log(&apos;============================&apos;);</div><div class="line">showAllProperties(descriptor2);</div></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<p><img src="/2016-4/3/5.png" alt="获取属性的特性"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tool.js]]></title>
      <url>https://qianlongo.github.io/2016/04/03/lib-js/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在学习和工作的过程中，我们经常需要一些辅助的东西来帮助我们将一些事情做好，比如写代码你可能需要用到一些判断数据类型的方法、得到某些元素属性的方式等。该篇文章<strong>持续记录</strong>自己在写程序过程中总结和积累的一些工具方法。<a href="https://github.com/qianlongo/tool.js/blob/master/tool.js" title="代码地址" target="_blank" rel="external">代码地址</a></p>
</blockquote>
<a id="more"></a>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><blockquote>
<p>代码的结构大致如下，每产生一个新的工具方法，便会在toll对象下挂载一个函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(function  (win) &#123;</div><div class="line"></div><div class="line">var tool = &#123;&#125;;</div><div class="line"></div><div class="line">// isUndefined 判断一个变量是否已经声明</div><div class="line"></div><div class="line">tool.isUndefined = function  (obj) &#123;</div><div class="line">  return obj === typeof  void 0;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">win.tool = tool;</div><div class="line"></div><div class="line">&#125;)(window);</div></pre></td></tr></table></figure>
<h2 id="1-isUndefined"><a href="#1-isUndefined" class="headerlink" title="1.  isUndefined()"></a>1.  isUndefined()</h2><blockquote>
<p>判断一个变量是否已经声明或声明但未赋值，返回值是boolean值，true已经声明，false 未声明</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tool.isUndefined = function  (obj) &#123;</div><div class="line">  return obj === typeof  void 0;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong> 测试 </strong><br><img src="/2016-4/3/1.png" alt="isUndefined"></p>
<h2 id="2-random-min-max"><a href="#2-random-min-max" class="headerlink" title="2.  random(min, max)"></a>2.  random(min, max)</h2><blockquote>
<p>得到一个从min ~ max 的整数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">tool.random = function  (min, max) &#123;</div><div class="line">if (min == null &amp;&amp; max == null) &#123;</div><div class="line">  return Math.random();</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (max == null) &#123;</div><div class="line">  max = min;</div><div class="line">  min = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return min + Math.floor(Math.random() * (max - min) + 1);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong> 测试 </strong><br><img src="/2016-4/3/2.png" alt="isUndefined"></p>
<h2 id="3-property-key"><a href="#3-property-key" class="headerlink" title="3. property(key)"></a>3. property(key)</h2><blockquote>
<p> 得到一个获取对象key属性的函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tool.property = function  (key) &#123;</div><div class="line">  return function  (obj) &#123;</div><div class="line">    return obj == null ? &apos;undefined&apos; : obj[key];</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="4-isArray"><a href="#4-isArray" class="headerlink" title="4. isArray"></a>4. isArray</h2><blockquote>
<p>判断一个对象是否是一个数组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tool.isArray = Array.isArray || function  (obj) &#123;</div><div class="line">  return  Object.prototype.toString.call(obj) === &apos;[object Array]&apos;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong> 测试 </strong></p>
<p><img src="/2016-4/3/3.png" alt="isUndefined"></p>
<h2 id="5-isArrayLike-arr"><a href="#5-isArrayLike-arr" class="headerlink" title="5. isArrayLike(arr)"></a>5. isArrayLike(arr)</h2><blockquote>
<p>判断一个对象是否是类数组，<strong>类数组</strong>是拥有这样一些特征的数据结构，具有类似数组length的属性，可以通过下标 0, 1, 2来访问类数组中的元素，在js中通常我们把他叫做集合。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tool.isArrayLike=  function  (arr) &#123;</div><div class="line">var getLength = this.property(&apos;length&apos;);</div><div class="line">var len = getLength(arr);</div><div class="line"></div><div class="line">return !this.isArray(arr) &amp;&amp; typeof len == &apos;number&apos; &amp;&amp; len &gt;= 0 &amp;&amp; length &lt;= Number.MAX_SAFE_INTEGER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 测试 </strong><br><img src="/2016-4/3/4.png" alt="isUndefined"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端神器emmet语法语法gif形式详解]]></title>
      <url>https://qianlongo.github.io/2016/04/02/%E5%89%8D%E7%AB%AF%E7%A5%9E%E5%99%A8emmet%E8%AF%AD%E6%B3%95%E8%AF%AD%E6%B3%95gif%E5%BD%A2%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>工欲善其事，必先利其器，好的神器可以给我们的生活和工作带来事半功倍的效率，这篇文章就是介绍和演示一前端神器  <strong>emmet</strong>,它最大的特点就是用来帮我们前端同学快速书写html。</p>
</blockquote>
<p>要完成下面这段html结构，在原始的刀耕火种时代我们是这样写的……<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;1&lt;/li&gt;</div><div class="line">  &lt;li&gt;2&lt;/li&gt;</div><div class="line">  &lt;li&gt;3&lt;/li&gt;</div><div class="line">  &lt;li&gt;4&lt;/li&gt;</div><div class="line">  &lt;li&gt;5&lt;/li&gt;</div><div class="line">  &lt;li&gt;6&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p><img src="/2016-4/1/1.gif" alt="原始html写法">;</p>
<p><strong> 然而科技是第一生产力，在程序员的世界里，生产力也是必不可少的，为了提高我们的代码产出率，emmet便诞生了，于是同样为了完成上述工作，emmet可以以下面简洁而又高效的方式完成，简直帅呆了，有木有 </strong></p>
<p><img src="/2016-4/1/2.gif" alt="原始html写法">;</p>
<p>看到这里小伙伴是不是开始鸡冻了呢！ 有木有想自己亲自撸一把的冲动呢！！！接下来我们开始看一下emmet的语法吧，至于emmet，该怎么使用，各大编辑器里面插件怎么安装，大家百度google一把就可以知道，开始吧，骚年。</p>
<h2 id="1-基础语法-标签-id-class-tagName"><a href="#1-基础语法-标签-id-class-tagName" class="headerlink" title="1. 基础语法 标签 id class ( tagName # . )"></a>1. 基础语法 标签 id class ( tagName # . )</h2><p><img src="/2016-4/1/3.gif" alt="emmet语法">;</p>
<h2 id="2-后代-兄弟-父级-gt"><a href="#2-后代-兄弟-父级-gt" class="headerlink" title="2. 后代 兄弟 父级 ( &gt; + ^ )"></a>2. 后代 兄弟 父级 ( &gt; + ^ )</h2><p><img src="/2016-4/1/4.gif" alt="emmet语法">;</p>
<h2 id="3-乘号-分组"><a href="#3-乘号-分组" class="headerlink" title="3. 乘号 分组 ( () )"></a>3. 乘号<em> 分组 (</em> () )</h2><p><img src="/2016-4/1/5.gif" alt="emmet语法">;</p>
<h2 id="4-自增-自减"><a href="#4-自增-自减" class="headerlink" title="4. 自增 自减 ( $ $@- )"></a>4. 自增 自减 ( $ $@- )</h2><p><img src="/2016-4/1/6.gif" alt="emmet语法">;</p>
<h2 id="5-自定义属性-key-value"><a href="#5-自定义属性-key-value" class="headerlink" title="5. 自定义属性 ( [key=value] )"></a>5. 自定义属性 ( [key=value] )</h2><p><img src="/2016-4/1/7.gif" alt="emmet语法">;</p>
<h2 id="6-文本"><a href="#6-文本" class="headerlink" title="6. 文本 ( {} )"></a>6. 文本 ( {} )</h2><p><img src="/2016-4/1/8.gif" alt="emmet语法">;</p>
<h2 id="7-隐式标签"><a href="#7-隐式标签" class="headerlink" title="7. 隐式标签"></a>7. 隐式标签</h2><blockquote>
<p>隐式标签指的是例如在一般情况下 ul 的子元素是 li，在使用emmet语法的时候，我们可以直接写<code>ul.list</code> 而不用去指定子元素的标签名 <code>ul&gt;li.list</code></p>
</blockquote>
<p><img src="/2016-4/1/9.gif" alt="emmet语法">;</p>
<h2 id="8-缩写"><a href="#8-缩写" class="headerlink" title="8. 缩写 :"></a>8. 缩写 :</h2><p><img src="/2016-4/1/10.gif" alt="emmet语法">;</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>日常的工作可以将上述的各种方式混合使用，最终让我们的编码从速度和质量上得到较大的提升。 </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js中多行字符串编辑，你会哪些方式]]></title>
      <url>https://qianlongo.github.io/2016/03/28/js%E4%B8%AD%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91%EF%BC%8C%E4%BD%A0%E4%BC%9A%E9%82%A3%E4%BA%9B%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>我们会经常遇到这样的场景，需要拼接多行字符串，在字符串中动态插入一些数据以达到业务的需求。但是js中并没有标准的多行编辑的函数，于是聪明的程序员们便脑洞大开，书写出许多有趣的方法。</p>
</blockquote>
<p><img src="/img/2016-03-28-1.png" alt="多行字符串拼接方式"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://qianlongo.github.io/"</span>&gt;</span>谦龙的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://aximario.github.io/"</span>&gt;</span>阿希的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lingyu.wang/"</span>&gt;</span>天镶的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong> 对于上图的dom结构如果要在js中拼接，你会用什么组织方式呢？ </strong></p>
<h2 id="1-常规方式"><a href="#1-常规方式" class="headerlink" title="1.  常规方式"></a>1.  常规方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var str = &apos;&lt;div class=&quot;links&quot;&gt;&lt;a href=&quot;http://qianlongo.github.io/&quot;&gt;谦龙的博客&lt;/a&gt;&lt;a href=&quot;http://aximario.github.io/&quot;&gt;阿希的博客&lt;/a&gt;&lt;a href=&quot;http://lingyu.wang/&quot;&gt;天镶的博客&lt;/a&gt;&lt;/div&gt;&apos;</div></pre></td></tr></table></figure>
<p><strong>看到上面那一坨的代码，不知道您的心情是怎样的，反正我是完全没有心情看下去了，可读性太差了，于是乎为了写出可读性强的代码我们开始了下面的征程</strong></p>
<h2 id="2-字符串相加形式"><a href="#2-字符串相加形式" class="headerlink" title="2. 字符串相加形式"></a>2. 字符串相加形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;div class="links"&gt;'</span> +</div><div class="line">	    <span class="string">'&lt;a href="http://qianlongo.github.io/"&gt;谦龙的博客&lt;/a&gt;'</span> +</div><div class="line">	    <span class="string">'&lt;a href="http://aximario.github.io/"&gt;阿希的博客&lt;/a&gt;'</span> +</div><div class="line">	    <span class="string">'&lt;a href="http://lingyu.wang/"&gt;天镶的博客&lt;/a&gt;'</span> +</div><div class="line">	  <span class="string">'&lt;/div&gt;'</span></div></pre></td></tr></table></figure>
<p><strong>这种也许是我们用的很多的一种方式，简单灵活，可以直观地看出dom结构，但是写出来的代码犹如满天繁星一般，有些头晕目眩</strong></p>
<h2 id="3-反斜杠"><a href="#3-反斜杠" class="headerlink" title="3. 反斜杠"></a>3. 反斜杠</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'&lt;div class="links"&gt;\</span></div><div class="line">  &lt;a href="http://qianlongo.github.io/"&gt;谦龙的博客&lt;/a&gt;\</div><div class="line">  &lt;a href="http://aximario.github.io/"&gt;阿希的博客&lt;/a&gt;\</div><div class="line">  &lt;a href="http://lingyu.wang/"&gt;天镶的博客&lt;/a&gt;\</div><div class="line">&lt;/div&gt;'</div></pre></td></tr></table></figure>
<h2 id="4-数组切割方式"><a href="#4-数组切割方式" class="headerlink" title="4. 数组切割方式"></a>4. 数组切割方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'&lt;div class="links"&gt;'</span>,<span class="string">'&lt;a href="http://qianlongo.github.io/"&gt;谦龙的博客&lt;/a&gt;'</span>,<span class="string">'&lt;a href="http://aximario.github.io/"&gt;阿希的博客&lt;/a&gt;'</span>,<span class="string">'&lt;a href="http://lingyu.wang/"&gt;天镶的博客&lt;/a&gt;'</span>,<span class="string">'&lt;/div&gt;'</span>].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<h2 id="5-es6-方式"><a href="#5-es6-方式" class="headerlink" title="5. es6 方式"></a>5. es6 方式</h2><blockquote>
<p>es6的到来给我们带来许多新的特性，其中有一部分是关于模板字符串的，专门可以用来解决多行编辑的问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">`&lt;div class="links"&gt;</span></div><div class="line">  &lt;a href="http://qianlongo.github.io/"&gt;谦龙的博客&lt;/a&gt;</div><div class="line">  &lt;a href="http://aximario.github.io/"&gt;阿希的博客&lt;/a&gt;</div><div class="line">  &lt;a href="http://lingyu.wang/"&gt;天镶的博客&lt;/a&gt;</div><div class="line">&lt;/div&gt;`</div></pre></td></tr></table></figure>
<p>注意第一个和最后一个” <strong>`</strong> “符号,整段代码干净简洁，太舒服了有木有</p>
<h2 id="6-黑魔法-function-toString"><a href="#6-黑魔法-function-toString" class="headerlink" title="6. 黑魔法 function.toString()"></a>6. 黑魔法 function.toString()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toSting</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> fn.toString().split(<span class="string">'\n'</span>).slice(<span class="number">1</span>,<span class="number">-1</span>).join(<span class="string">'\n'</span>) + <span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = toString(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*</span></div><div class="line">	&lt;div class="links"&gt;</div><div class="line">		&lt;a href="http://qianlongo.github.io/"&gt;谦龙的博客&lt;/a&gt;</div><div class="line">		&lt;a href="http://aximario.github.io/"&gt;阿希的博客&lt;/a&gt;</div><div class="line">		&lt;a href="http://lingyu.wang/"&gt;天镶的博客&lt;/a&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">*/&#125;)</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>方法会有很多，适合自己的，适合解决实际问题的方法才是最好的方法。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数组浅析]]></title>
      <url>https://qianlongo.github.io/2016/03/27/javascript%E6%95%B0%E7%BB%84%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Array是js中的引用数据类型，除了Object外，Array几乎是日常开发中最常用的数据类型，这边文章旨在将js相关的api分类汇总，备作学习笔记。</p>
</blockquote>
<h2 id="js中的数组与其他语言的不同之处"><a href="#js中的数组与其他语言的不同之处" class="headerlink" title="js中的数组与其他语言的不同之处"></a>js中的数组与其他语言的不同之处</h2><ol>
<li>可以保存<code>任意的</code>数据类型</li>
<li>数组长度动态调整</li>
</ol>
<a id="more"></a>
<h2 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h2><blockquote>
<p>ECMAScript中提供了让数组的行为类似于栈的方法，即可以让数组表现的如同栈的LIFO数据结构一般，方法分别是push，pop</p>
</blockquote>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><blockquote>
<p>用法：该方法接收任意数量的参数，把他们逐个添加到数组的末尾，并返回修改后数组的长度</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var nums = [];</div><div class="line">var len = nums.push(1,2,3);//一次性添加三个元素 返回修改后的数组长度3</div><div class="line">    console.log(nums,&apos;len=&apos; + len);</div><div class="line">    len = nums.push(4);//添加一个元素 返回数组修改后的数组长度4</div><div class="line">    console.log(nums,&apos;len=&apos; + len);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-1.png" alt="push"></p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><blockquote>
<p>用法：该方法删除数组最后一项，<code>减少</code>length的值，并且返回<code>被删除</code>的元素</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var nums = [1,2,3,4];</div><div class="line">    var returnNum = nums.pop();//删除最后一项 并返回</div><div class="line">    console.log(&apos;len=&apos; + nums.length,&apos;returnNum=&apos; + returnNum);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-2.png" alt="pop"></p>
<h3 id="栈常见应用之数制转换"><a href="#栈常见应用之数制转换" class="headerlink" title="栈常见应用之数制转换"></a>栈常见应用之数制转换</h3><p>进行数制之间的相互转换是是编程中经常遇见的问题，我们可以利用数组栈的这个特性来完成这个操作</p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//该函数接收一个整型数字，以及要转化的数制基数</div><div class="line"> function mulBase(num,base)&#123;</div><div class="line">    var numArr = [];</div><div class="line">    do&#123;</div><div class="line">       numArr.push(num%base);//入栈</div><div class="line">       num = Math.floor((num/base))</div><div class="line">    &#125;while(num&gt;0);</div><div class="line">    var converted = &apos;&apos;;</div><div class="line">    while(numArr.length&gt;0)&#123;</div><div class="line">       converted += numArr.pop();//出栈</div><div class="line">    &#125;</div><div class="line">    return converted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-3.png" alt="数值转换"></p>
<p><strong>未完待续zZZ</strong></p>
<h3 id="栈常见运用之回文判断"><a href="#栈常见运用之回文判断" class="headerlink" title="栈常见运用之回文判断"></a>栈常见运用之回文判断</h3><blockquote>
<p><strong>回文</strong>：回文是指这样的一种现象 一个单词、短语、或者数字，<strong>从前往后</strong>写和<strong>从后往前</strong>写都是一样的。例如单词”dad”、”racecar”。</p>
<p><code>code</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function isPalindrome(word)&#123;</div><div class="line">var word = &apos;&apos;+word;</div><div class="line">var wordArr = [];</div><div class="line">    for(var i=0;i&lt;word.length;i++)&#123;</div><div class="line">      wordArr.push(word.charAt(i));//入栈</div><div class="line">    &#125;</div><div class="line">var reWord=&apos;&apos;;</div><div class="line">    while(wordArr.length&gt;0)&#123;</div><div class="line">      reWord += wordArr.pop();//出栈</div><div class="line">    &#125;</div><div class="line">    return reWord == word ? true : false;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/img/2016-03-27-4.png" alt="回文判断"></p>
<h2 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h2><blockquote>
<p>栈数据结构的访问规则是LIFO(后进先出),而队列数据结构的访问规则是FIFO(先进先出),即队列在末端添加项，在前端移除项。实现这一结构的方法是push(末端添加),shift(前端移除),前面已经说过push，接下来主要说shift</p>
</blockquote>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><blockquote>
<p>shift方法能够移除数组的第一项并且返回该项，同时将数组的长度减一</p>
<p><code>code</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">var reNum = arr.shift();//1</div><div class="line">    console.log(reNum,arr.length)//1,3</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-5.png" alt="shift"></p>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><blockquote>
<p>unshift与shift<strong>作用相反</strong>，在数组的前端添加任意个项，并且返回该数组的长度。<br><code>code</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">var reLen = arr.unshift(0);//5</div><div class="line">    reLen2 = arr.unshift(-2,-1);//7</div><div class="line">    console.log(&apos;reLen=&apos; + reLen,&apos;reLen2=&apos; + reLen2,&apos;arr=&apos; + arr);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-6.png" alt="unshift"></p>
<h2 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h2><blockquote>
<p>数组中存在两个直接用来排序的方法：reverse和sort，其中reverse用来逆反数组，sort则默认按照字母顺序进行排序。</p>
</blockquote>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote>
<p>reverse 将对原来的数组进行反转，并返回改变后的数组，其会<code>改变原数组的值</code>。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [5,4,3,2,1];</div><div class="line">var reverseArr = arr.reverse();</div><div class="line">    console.log(&apos;arr:&apos; + arr,&apos;reverseArr:&apos; + reverseArr);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-7.png" alt="reverse"></p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote>
<p>在默认情况下，sort方法按照升序排列数组项，为了实现排序，sort会调用每个数组项的<strong>toString</strong>方法，然后比较得到的字符串，以确定如何进行排序。故sort方法是通过字符串进行比较的，即使数组的每一项是数字类型亦是如此。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var sortArr=[0,1,5,10,15];</div><div class="line">    sortArr.sort();</div><div class="line">    console.log(sortArr);//0,1,10,15,5</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-8.png" alt="sort"></p>
<p><strong>为了能够对数组进行我们想要的排序，可以给sort传一个比较函数作为参数</strong></p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var sortArr=[0,1,5,10,15];</div><div class="line">    sortArr.sort(function(a,b)&#123;</div><div class="line">       return a-b//升序</div><div class="line">      /*</div><div class="line">        return b-a//降序</div><div class="line">      */</div><div class="line">   &#125;);</div><div class="line">   console.log(sortArr);//[0,1,5,10,15]</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-9.png" alt="sort数字排序"></p>
<h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><blockquote>
<p>所有对象都有toLocalString()、toString()、valueOf()方法。</p>
</blockquote>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote>
<p>将一个值转换成一个字符串有两种方法，一是使用toString()方法，二是使用转型函数String()<br><strong>(当然还有添加空字符串的方式)</strong></p>
</blockquote>
<p><strong>以下几点需要注意</strong></p>
<ol>
<li>几乎所有值都有toString方法，说明有的值是没有的，比如null、undefined<br><strong>推荐观看</strong> <a href="https://msdn.microsoft.com/zh-cn/library/k6xhc6yc%28v=vs.94%29.aspx" target="_blank" rel="external">toString</a></li>
</ol>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var num = 10;</div><div class="line">var boolean1 = true;</div><div class="line">var str = &apos;谦龙&apos;;</div><div class="line">var obj = &#123;&quot;name&quot;:&quot;谦龙&quot;&#125;;</div><div class="line">var arr = [1,2,3,4];</div><div class="line">var nul = null;</div><div class="line">var undefined1 = undefined;</div><div class="line"></div><div class="line">console.log( num.toString())</div><div class="line">console.log( boolean1.toString())</div><div class="line">console.log( str.toString())</div><div class="line">console.log( obj.toString())</div><div class="line">console.log( arr.toString())</div><div class="line">console.log( nul.toString())</div><div class="line">console.log( undefined1.toString())</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-10.png" alt="toString"></p>
<ol>
<li>对于字符串类型的数值也可以使用toString方法，返回值是该字符串的副本</li>
<li>toString方法接收一个参数，表示将要转换的数值的基数(默认是10)，<strong>注意</strong>只最<strong>数值</strong>起作用</li>
</ol>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var num = 10;</div><div class="line">var num2 = &apos;10&apos;;</div><div class="line">console.log(num.toString()) // &apos;10&apos;</div><div class="line">console.log(num.toString(2))// &apos;1010&apos;</div><div class="line">console.log(num.toString(8))// &apos;12&apos;</div><div class="line">console.log(num.toString(16))//&apos;a&apos;</div><div class="line">console.log(num2.toString(2)) // &apos;10&apos;不是1010  只对数值起作用</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-11.png" alt="toString ">   </p>
<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><blockquote>
<p>返回指定对象的基元值。</p>
</blockquote>
<p><strong>推荐观看</strong><a href="https://msdn.microsoft.com/zh-cn/library/ftx8swz5%28v=vs.94%29.aspx" target="_blank" rel="external">valueOf</a></p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">var bl = true;</div><div class="line">function fn()&#123;console.log(&apos;谦龙&apos;)&#125;;</div><div class="line">var num = 10;</div><div class="line">var str = &apos;谦龙&apos;;</div><div class="line">var obj = /\d/;</div><div class="line">console.log(arr.valueOf(),typeof( arr.valueOf()));</div><div class="line">console.log(bl.valueOf(),typeof( bl.valueOf()));</div><div class="line">console.log(fn.valueOf(),typeof( fn.valueOf()));</div><div class="line">console.log(num.valueOf(),typeof( num.valueOf()));</div><div class="line">console.log(str.valueOf(),typeof( str.valueOf()))</div><div class="line">console.log(obj.valueOf(),typeof( obj.valueOf()));</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-12.png" alt="valueOf描述"></p>
<h3 id="toLocalString"><a href="#toLocalString" class="headerlink" title="toLocalString"></a>toLocalString</h3><blockquote>
<p>toLocalString方法作用几乎和toString相同</p>
</blockquote>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote>
<p>将数组中的元素用不同的分隔符连接成字符串（默认是”，”号）</p>
</blockquote>
<p><code>code</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">    console.log(arr.join());</div><div class="line">    console.log(arr.join(&apos;&apos;));</div><div class="line">    console.log(arr.join(&apos;+&apos;))</div></pre></td></tr></table></figure></p>
<p><img src="/img/2016-03-27-13.png" alt="join"></p>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><blockquote>
<p>concat方法可以基于当前数组中的所有项创建一个<strong>新的数组</strong>，具体来说：</p>
</blockquote>
<ol>
<li>该方法会先创建一个当前数组的副本，然后将接收到的参数添加到这个数组的末尾，最后返回新构建的数组。</li>
<li>如果传递的是一个或者多个数组，则会将这些数组中的每一项都添加到结果数组中。</li>
<li>如果传递的不是数组，这些值就会被简单的添加到结果数组的末尾。</li>
</ol>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var sourceArr = [0];</div><div class="line">var reArr = sourceArr.concat(1,[2,3],[4,5]);</div><div class="line">    console.log(&apos;sourceArr&apos;+sourceArr,&apos;reArr&apos;+reArr);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-14.png" alt="join"></p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><blockquote>
<p>基于当前数组的一项或者多项创建一个<strong>新的数组</strong>，slice方法接受一个或者两个参数。<strong>一个参数时</strong>：返回该参数<strong>指定的位置</strong>到当前数组末尾的所有项。<strong>两个参数时</strong>：返回起始位置到结束位置之间的项（不包括结束位置并且该方法不影响原来的数组）</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var arr2 = arr.slice(0);// 0-末尾所有元素</div><div class="line">var arr3 = arr.slice(0,3)// 0-3 不包括3的位置的元素</div><div class="line">var arr4 = arr.slice(-3,-1);//即最后一个元素是-1 以此往左类推 所以得到的结果是[3,4]</div><div class="line">console.log(arr2);</div><div class="line">console.log(arr3);</div><div class="line">console.log(arr4);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-15.png" alt="slice"></p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><blockquote>
<p>slice方式可以说是数组中功能最强大的方法，可以完成任意位置的<strong>插入</strong>，<strong>删除</strong>和<strong>替换</strong>操作</p>
<p><strong>插入</strong>：可以向任意位置插入任意数量的项，提供三个参数–插入的起始位置、0（删除元素的个数）、插入的元素（如果要插入多个元素，再传入第四第五…个参数），返回被删除的项目（如果没有被删除的元素返回的是[]空数组）。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var reArr = arr.splice(1,0,&apos;谦龙&apos;,&apos;谦龙2&apos;,&apos;谦龙3&apos;);</div><div class="line">console.log(arr,reArr);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-16.png" alt="splice插入"></p>
<p><strong>删除</strong>：可以删除任意数量的项，需要指定2个参数，要删除的第一项的位置和要删除的项数。</p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var reArr = arr.splice(0,2);</div><div class="line">    console.log(arr,reArr);</div><div class="line"></div><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var reArr = arr.splice(5,2);//注意这里的5不在数组的范围内</div><div class="line">    console.log(arr,reArr)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-17.png" alt="splice删除"></p>
<p><strong>替换</strong>:可以向指定的位置插入任意数量的项，且同时删除任意数量的项，需要提供三个参数</p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var reArr = arr.splice(0,2,&apos;谦龙&apos;);</div><div class="line">console.log(arr,reArr)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-18.png" alt="splice删除替换"></p>
<h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2><blockquote>
<p>数组中有两个位置方法：indexOf和lastIndexOf。都接收两个参数—要查找的项和表示查找起点的索引（可选）。其中indexOf从数组开头开始往后查找，lastIndexOf从后往前查找，返回值是项在数组中的位置或者-1（没有找到）</p>
</blockquote>
<h3 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf 和 lastIndexOf"></a>indexOf 和 lastIndexOf</h3><p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,&apos;谦龙&apos;,4,5,&apos;谦龙&apos;,6];</div><div class="line">console.log(arr.indexOf(&apos;谦龙&apos;));//3</div><div class="line">console.log(arr.indexOf(&apos;帅哥&apos;));//-1</div><div class="line">console.log(arr.lastIndexOf(&apos;谦龙&apos;));//6</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-19.png" alt="位置方法"></p>
<h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><blockquote>
<p>ECMAScript为数组定义了5个迭代的方法，每个方法都可以接受两个参数，要在每一项运行的函数和（可选）运行该函数的作用域对象—影响的是this的值。而传入的函数有三个参数分别是：数组项的值，索引，数组本身。</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>对数组的每一项运行给定的函数，没有返回值。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">    arr.forEach(function(item,index,arr)&#123;</div><div class="line">        console.log(item,index,arr);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-20.png" alt="forEach测试"></p>
<p><strong>特别注意：</strong>除了以上的基本用法，forEach中默认的this指的是window对象，所以其可以接受一个用来改变this的参数。</p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">arr.forEach(function(item,index,arr)&#123;</div><div class="line">   console.log(this)</div><div class="line">&#125;,arr);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-21.png" alt="forEach this指向发生改变"></p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote>
<p>对数组的每一项运行有返回值的函数，最后映射成一个新的数组。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">arr.map(function(item,index,arr)&#123;</div><div class="line">console.log(this);</div><div class="line">return item*item;</div><div class="line">&#125;,arr)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-22.png" alt="map测试"></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote>
<p>有过滤筛选的含义，接收一个有返回值为<strong>弱==true</strong>的函数，最后返回一个过滤后的新数组。关于this指向的问题与上面的forEach和map是一样的</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7];</div><div class="line">var newArr=arr.filter(function(item)&#123;</div><div class="line"> if(item%2==0)&#123;</div><div class="line">    return true;//返回值为布尔</div><div class="line">  &#125;</div><div class="line">  //也可以直接写成 return item%2;</div><div class="line">&#125;)</div><div class="line">console.log(newArr)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-23.png" alt="图片描述"></p>
<h3 id="every-和some"><a href="#every-和some" class="headerlink" title="every 和some"></a>every 和some</h3><blockquote>
<p>接收一个返回值为布尔值的函数，如果对于数组中的每一项，该函数都是返回true则，该方法返回true。<strong>注意</strong>该方法和前面的几个方法不同，不会返回数组，而是返回一个布尔值。some也是如此</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3,4,5];</div><div class="line"> var b=arr.every(function(item)&#123;</div><div class="line">     return item%2==0?true:false;</div><div class="line"> &#125;);</div><div class="line"> console.log(b) </div><div class="line"> </div><div class="line"> ar arr=[1,2,3,4,5];</div><div class="line"> var b=arr.some(function(item)&#123;</div><div class="line">     return item%2==0?true:false;</div><div class="line"> &#125;);</div><div class="line"> console.log(b)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-24.png" alt="every some应用"></p>
<h2 id="减小方法"><a href="#减小方法" class="headerlink" title="减小方法"></a>减小方法</h2><blockquote>
<p>ES5中对数组新增了两个”缩小”方法(ps:缩小是相对的)，这两个方法都会迭代数组中的每一项，然后构建一个最终的返回值。reduce从第0项开始，ruduceRight从末尾开始。</p>
</blockquote>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote>
<p>该函数接收一个函数参数，函数接受4个参数：之前值、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。若指定，则当作最初使用的previous值；如果缺省，则使用数组的第一个元素作为previous初始值，同时current往后排一位，相比有initialValue值少一次迭代。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">var sum = arr.reduce(function(pre,cur,index,arr)&#123;</div><div class="line">    return pre+cur;</div><div class="line">&#125;);</div><div class="line">console.log(sum)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-25.png" alt="reduece"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 初始设置</div><div class="line">pre = initialValue = 1, cur = 2</div><div class="line"></div><div class="line">// 第一次迭代</div><div class="line">pre = (1 + 2) =  3, cur = 3</div><div class="line"></div><div class="line">// 第二次迭代</div><div class="line">pre = (3 + 3) =  6, cur = 4</div><div class="line"></div><div class="line">// 第三次迭代</div><div class="line">pre = (6 + 4) =  10, cur = undefined (退出)</div></pre></td></tr></table></figure>
<h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><blockquote>
<p>该函数接收一个函数参数，函数接受4个参数：之前值、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。若指定，则当作最初使用的previous值；如果缺省，则使用数组的第一个元素作为previous初始值，同时current往后排一位，相比有initialValue值少一次迭代。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4];</div><div class="line">var reNum = arr.reduceRight(function(pre,cur,idnex,arr)&#123;</div><div class="line">return pre+cur;</div><div class="line">&#125;)</div><div class="line">console.log(reNum)</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-27-26.png" alt="reduceRight测试"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 初始设置</div><div class="line">pre = initialValue = 4, cur = 3</div><div class="line"></div><div class="line">// 第一次迭代</div><div class="line">pre = (4 +3) =  7, cur = 2</div><div class="line"></div><div class="line">// 第二次迭代</div><div class="line">pre = (7 + 2) =  9, cur = 1</div><div class="line"></div><div class="line">// 第三次迭代</div><div class="line">pre = (9 + 1) =  10, cur = undefined (退出)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[只用一个div,我们能做什么？]]></title>
      <url>https://qianlongo.github.io/2016/03/27/%E5%8F%AA%E7%94%A8%E4%B8%80%E4%B8%AAdiv-%E6%88%91%E4%BB%AC%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>现在都流行用纯css实现一些非常有趣的事情，比如纯css实现”暖男大白”啦( <a href="http://www.17sucai.com/pins/demoshow/9598" target="_blank" rel="external">戳这里</a> )，纯css实现哆啦a梦啦( <a href="http://www.w3cfuns.com/notes/20156/9afc0fe168cc0747bd632da963687973" target="_blank" rel="external">戳这里</a> )等等，还有只用一个div我们能做哪些有趣的事情啦，今天我也准备写一篇文章( 持续更新 )，记录自己平时学习和工作过程中只用一个div来完成的一些应用和好玩的东西。</p>
</blockquote>
<a id="more"></a>
<p>以后陆续更新会将demo保存在<a href="http://sandbox.runjs.cn/show/5yl6lwbv" target="_blank" rel="external">这里</a></p>
<p><strong>html</strong>结构都是一个div所以不会展示其部分代码，只会分析和展示css部分</p>
<h3 id="1-画一个伸缩展开菜单按钮"><a href="#1-画一个伸缩展开菜单按钮" class="headerlink" title="1. 画一个伸缩展开菜单按钮"></a>1. 画一个伸缩展开菜单按钮</h3><blockquote>
<p>首先我们来画一个前端工作中经常要用到的一个icon图标，<strong>伸缩展开菜单按钮*</strong>,他的主要作用就是将隐藏的菜单展开以显示或者伸缩以隐藏。如下图所示,或者请戳你的浏览器右上角…Go。</p>
</blockquote>
<p><img src="/img/2016-03-27-27.png" alt="伸缩展开按钮"></p>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.hamburger &#123;</div><div class="line">  position: relative;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  cursor: pointer;</div><div class="line">  border: solid 1px #68EA58;</div><div class="line">&#125;</div><div class="line">.hamburger:before,.hamburger:after&#123;</div><div class="line">  display: block;;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  width: 60%;</div><div class="line">  position: absolute;</div><div class="line">  left: 50%;</div><div class="line">  top: 50%;</div><div class="line">  -webkit-transform: translate(-50%,-50%);</div><div class="line">  -ms-transform: translate(-50%,-50%);</div><div class="line">  -o-transform: translate(-50%,-50%);</div><div class="line">  transform: translate(-50%,-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.hamburger:before &#123;</div><div class="line">  border-top: 4px solid #68EA58;</div><div class="line">  border-bottom: 4px solid #68EA58;</div><div class="line">  height: 14px;</div><div class="line">&#125;</div><div class="line">.hamburger:after &#123;</div><div class="line">  background: #68EA58;</div><div class="line">  height: 4px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看效果，点击<a href="http://sandbox.runjs.cn/show/5yl6lwbv" target="_blank" rel="external">这里</a></p>
<h2 id="2-回到顶部"><a href="#2-回到顶部" class="headerlink" title="2. 回到顶部"></a>2. 回到顶部</h2><blockquote>
<p>几乎每一张网页都有一个回到顶部的按钮，方便用户随浏览时，回到网页顶部进行其他的操作。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/*回到顶部*/</div><div class="line"></div><div class="line">.to-top&#123;</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div><div class="line">.to-top:after,.to-top:before&#123;</div><div class="line">  display: block;;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  position: absolute;</div><div class="line">  left: 50%;</div><div class="line">  -webkit-transform: translateX(-50%);</div><div class="line">  -ms-transform: translateX(-50%);</div><div class="line">  -o-transform: translateX(-50%);</div><div class="line">  transform: translateX(-50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.to-top:before&#123;</div><div class="line">  border: solid 14px #68EA58;</div><div class="line">  border-left-color: transparent;</div><div class="line">  border-top-color: transparent;</div><div class="line">  border-right-color: transparent;</div><div class="line">&#125;</div><div class="line">.to-top:after&#123;</div><div class="line">  width: 12px;</div><div class="line">  height: 12px;</div><div class="line">  background-color: #68EA58;</div><div class="line">  top:28px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看效果，点击<a href="http://sandbox.runjs.cn/show/5yl6lwbv" target="_blank" rel="external">这里</a></p>
<h2 id="3-消息提示框"><a href="#3-消息提示框" class="headerlink" title="3. 消息提示框"></a>3. 消息提示框</h2><blockquote>
<p>一般前端工作中会有这样的需求，鼠标进行某些操作，进而给到用户一些提示信息，这些提示信息的载体是一个提示框。</p>
</blockquote>
<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*信息提示*/</div><div class="line">.message&#123;</div><div class="line">  border-radius: 4px;</div><div class="line">  height: 30px !important;</div><div class="line">&#125;</div><div class="line">.message:after&#123;</div><div class="line">  display: block;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  position: absolute;</div><div class="line">  border-bottom: 6px solid transparent;</div><div class="line">  border-left:6px solid  #68EA58;;</div><div class="line">  bottom: -6px;</div><div class="line">  left: 20%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看效果，点击<a href="http://sandbox.runjs.cn/show/5yl6lwbv" target="_blank" rel="external">这里</a></p>
<h2 id="4-搜索按钮"><a href="#4-搜索按钮" class="headerlink" title="4. 搜索按钮"></a>4. 搜索按钮</h2><blockquote>
<p>搜索按钮对于我们来说在熟悉不过，几乎涉及到搜索的地方都会有一个搜索按钮，用来提示用户这一块是用于搜索信息用的</p>
</blockquote>
<p><code>code</code></p>
<pre><code>

.search{
  width: 24px !important;
  height: 4px !important;
  background-color:  #68EA58;
  -webkit-transform: rotate(45deg) translateX(14px) ;
  -ms-transform: rotate(45deg) translateX(14px) ;
  -o-transform: rotate(45deg) translateX(14px) ;
  transform: rotate(45deg) translateX(14px);
}

.search:before{
  display: block;
  content: &apos;&apos;;
  width: 20px;
  height: 20px;
  border: 4px solid #68EA58;
  border-radius: 50%;
  position: absolute;
  left: -28px;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面对数组去重，我们用什么方式]]></title>
      <url>https://qianlongo.github.io/2016/03/26/%E9%9D%A2%E5%AF%B9%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E7%94%A8%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>不管是面试还是平时写程序的过程中我们经常会遇到要对<strong>数组进行去重</strong>的问题，该文总结了一些常见的数组去重的方法。</p>
<h2 id="对象键值对法"><a href="#对象键值对法" class="headerlink" title="对象键值对法"></a>对象键值对法</h2><p><strong>思路：</strong>新建一js对象json以及新数组reArr，遍历数组元素是否为json的键，不是则创建，是则判断元素的类型在键对应的值中是否存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    function unique(array)&#123;</div><div class="line">      var json = &#123;&#125;, reArr = [], len = array.length, val, type;</div><div class="line">        for (var i = 0; i &lt; len ; i++) &#123;</div><div class="line">            val = array[i];</div><div class="line">            type = Object.prototype.toString.call(val);</div><div class="line">            if (!json[val]) &#123;//如果键对应的值不存在则是第一次存取</div><div class="line">                json[val] = [type];//设置该键为数组，并赋值元素类型</div><div class="line">                reArr.push(val);//往reArr中添加元素</div><div class="line">            &#125; else if (json[val].indexOf(type) &lt; 0) &#123;</div><div class="line">                json[val].push(type);</div><div class="line">                reArr.push(val);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return reArr;</div><div class="line">    &#125;</div><div class="line">//该方法有bug，当有多个&#123;&#125;时，只能保存一个&#123;&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>测试</strong><br><img src="/img/2016-03-26-13.png" alt="unique1测试"></p>
<h2 id="遍历数组法"><a href="#遍历数组法" class="headerlink" title="遍历数组法"></a>遍历数组法</h2><p><strong>思路：</strong>新建一新数组，遍历传入的数组，值不在新数组就加入该新数组中；该方法最主要的是要使用ES5中的indexOf方法。但是ie8一下不支持，所以需要做一些兼容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    if (!Array.prototype.indexOf)&#123;</div><div class="line">      Array.prototype.indexOf = function(item)&#123;</div><div class="line">        if (this.length == 0)&#123;</div><div class="line">          return -1;</div><div class="line">        &#125;</div><div class="line">        for(var i = 0, len = this.length; i &lt; len; i++)&#123;</div><div class="line">          if (this[i] === item)&#123;//注意是三个等号</div><div class="line">            return i</div><div class="line">            break;</div><div class="line">          &#125;  </div><div class="line">        &#125;</div><div class="line">        return -1;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>去重代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function unique(array)&#123;</div><div class="line">  var reArr = []; </div><div class="line">  for(var i = 0; i &lt; array.length; i++)&#123;</div><div class="line">    if (reArr.indexOf(array[i]) == -1)&#123;//判断元素是否在数组中已经存在</div><div class="line">       reArr.push(array[i]);</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">  return reArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>测试</strong><br><img src="/img/2016-03-26-14.png" alt="遍历数组法测试"></p>
<h2 id="数组下标判断法"><a href="#数组下标判断法" class="headerlink" title="数组下标判断法"></a>数组下标判断法</h2><p><strong>思路：</strong>将传入的数组的第一项目添加到一个新的数组，后遍历传入的数组中的元素利用indexOf方法，若返回值与循环中的索引不同则是重复的元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function unique(array)&#123;</div><div class="line">    var reArr=[];</div><div class="line">        reArr[0]=array[0];</div><div class="line">    for(var i=1;i&lt;array.length;i++)&#123;</div><div class="line">        if(array.indexOf(array[i])==i)&#123;</div><div class="line">            reArr.push(arrar[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return reArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>测试</strong><br><img src="/img/2016-03-26-15.png" alt="遍历数组下表法测试"></p>
<h2 id="排序后相邻去除法"><a href="#排序后相邻去除法" class="headerlink" title="排序后相邻去除法"></a>排序后相邻去除法</h2><p><strong>思路：</strong>先将数组经过sort排序，这时候相同的元素处于相邻的位置,所以在便利数组的时候我们只将与前一值不重复的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function unique(array)&#123;</div><div class="line">    var reArr=[array[0]];</div><div class="line">    var len=array.length;</div><div class="line">        array.sort();</div><div class="line">    for(var i=1;i&lt;len;i++)&#123;</div><div class="line">        if(array[i]!=reArr[reArr.length-1])&#123;//注意这里</div><div class="line">            reArr.push(array[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return reArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-16.png" alt="排序后相邻去除法"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[几个js开发过程中的小技巧]]></title>
      <url>https://qianlongo.github.io/2016/03/26/%E5%87%A0%E4%B8%AAjs%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>javascript是一门非常灵活的语言，实际的开发过程中我们也可以灵活的使用它而给我们的工作带来便利，这篇文章记录了自己平时学习过程中经常用到的一些小技巧，整理出来作为笔记，也希望对感兴趣的同学有所帮助。( 持续更新… )</p>
</blockquote>
<h2 id="1-获取指定范围内的随机数"><a href="#1-获取指定范围内的随机数" class="headerlink" title="1 获取指定范围内的随机数"></a>1 获取指定范围内的随机数</h2><blockquote>
<p>当我们需要获取指定范围(min,max)内的整数的时候，下面的代码非常适合。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRadomNum</span>(<span class="params">min,max</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span>  <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>测试</strong><br><img src="/img/2016-03-26-2.png" alt="测试"></p>
<h2 id="2-随机获取数组中的元素"><a href="#2-随机获取数组中的元素" class="headerlink" title="2 随机获取数组中的元素"></a>2 随机获取数组中的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRadomFromArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*arr.length)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-3.png" alt="测试"></p>
<h2 id="3-生成从0到指定值的数字数组"><a href="#3-生成从0到指定值的数字数组" class="headerlink" title="3 生成从0到指定值的数字数组"></a>3 生成从0到指定值的数字数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[],length=<span class="number">100</span>,i=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(;arr.push(i++)&lt;length;)&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(arr)</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-4.png" alt="测试"></p>
<h2 id="4-打乱数字数组的顺序"><a href="#4-打乱数字数组的顺序" class="headerlink" title="4 打乱数字数组的顺序"></a>4 打乱数字数组的顺序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="string">'a'</span>,<span class="string">'dsfs'</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'v'</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>&#125;);</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-5.png" alt="测试"></p>
<h2 id="5-对象转换为数组"><a href="#5-对象转换为数组" class="headerlink" title="5 对象转换为数组"></a>5 对象转换为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意对象必须是以下格式的才可以通过此方式转化为数组</span></div><div class="line"><span class="comment">//获取的DOM集合，以及函数的arguments也可以通过此方式转化为数组</span></div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="number">0</span>:<span class="string">'qian'</span>,</div><div class="line">	<span class="number">1</span>:<span class="string">'long'</span>,</div><div class="line">	<span class="number">2</span>:<span class="string">'chu'</span>,</div><div class="line">	<span class="number">3</span>:<span class="string">'tian'</span>,</div><div class="line">	<span class="attr">length</span>:<span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> _slice=[].slice;</div><div class="line"><span class="keyword">var</span> objArr=_slice.call(obj);</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-6.png" alt="图片描述"></p>
<h2 id="6-验证是否为数组"><a href="#6-验证是否为数组" class="headerlink" title="6 验证是否为数组"></a>6 验证是否为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<p><img src="/img/2016-03-26-7.png" alt="图片描述"></p>
<h2 id="7-获取数组中最大或者最小值"><a href="#7-获取数组中最大或者最小值" class="headerlink" title="7 获取数组中最大或者最小值"></a>7 获取数组中最大或者最小值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxAndMin</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">   <span class="attr">max</span>:<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr.join(<span class="string">','</span>).split(<span class="string">','</span>)),</div><div class="line">   <span class="attr">min</span>:<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr.join(<span class="string">','</span>).split(<span class="string">','</span>))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>该方法适合一维或者多维数组求最大最小值的情况</strong></p>
<p><strong>测试</strong><br><img src="/img/2016-03-26-8.png" alt="图片描述"></p>
<h2 id="8-清空数组"><a href="#8-清空数组" class="headerlink" title="8 清空数组"></a>8 清空数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一 通过将长度设置为0</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.length=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//方式二 通过splice方法</span></div><div class="line"> <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.splice(<span class="number">0</span>,arr.length);</div><div class="line"></div><div class="line"><span class="comment">//方式三 通过将空数组 [] 赋值给数组(严格意义来说这只是将ary重新赋值为空数组，之前的数组如果没有引用在指向它将等待垃圾回收。)</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr=[];</div></pre></td></tr></table></figure>
<h2 id="9-保留指定小数位"><a href="#9-保留指定小数位" class="headerlink" title="9 保留指定小数位"></a>9 保留指定小数位</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num =<span class="number">4.345678</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// 4.3457 第四位小数位以四舍五入计算</span></div></pre></td></tr></table></figure>
<h2 id="10-不要直接使用delete来删除数组中的元素"><a href="#10-不要直接使用delete来删除数组中的元素" class="headerlink" title="10 不要直接使用delete来删除数组中的元素"></a>10 不要直接使用delete来删除数组中的元素</h2><blockquote>
<p>数组在js中也是对象，有时候我们可能会通过delete来删除数组中的元素，但是其实仅仅是将数组的元素的值赋值为了undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'谦龙'</span>,<span class="string">'雏田'</span>];</div><div class="line">    <span class="keyword">delete</span> arr[<span class="number">5</span>];</div><div class="line">    <span class="built_in">console</span>.log(arr,arr[<span class="number">5</span>],arr.length);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>测试</strong></p>
<p><img src="/img/2016-03-26-9.png" alt="图片描述"></p>
<p><strong>可以通过splice来删除数组中的某一项</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'谦龙'</span>,<span class="string">'雏田'</span>];</div><div class="line">    arr.splice(<span class="number">5</span>,<span class="number">1</span>);</div><div class="line">    <span class="built_in">console</span>.log(arr,arr[<span class="number">5</span>],arr.length);</div></pre></td></tr></table></figure></p>
<p><strong>测试</strong></p>
<p><img src="/img/2016-03-26-10.png" alt="图片描述"></p>
<h2 id="11-生成指定长度的随机字母数字字符串"><a href="#11-生成指定长度的随机字母数字字符串" class="headerlink" title="11 生成指定长度的随机字母数字字符串"></a>11 生成指定长度的随机字母数字字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ; str.length &lt; len; str  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span>  str.substr(<span class="number">0</span>, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试</strong><br><img src="/img/2016-03-26-11.png" alt="图片描述"></p>
<h2 id="12-null-与-undefined"><a href="#12-null-与-undefined" class="headerlink" title="12 null 与 undefined"></a>12 null 与 undefined</h2><blockquote>
<p>null == undefined,null == null 返回true,有时候我们为了排除null 和 undefined可以使用如下的代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(obj!=<span class="literal">null</span>)&#123;<span class="comment">// obj除了undefined 和 null 之外都会走这里</span></div><div class="line">        ....这里写代码逻辑</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="13-找出数组中出现次数最的元素，并给出其出现过的位置"><a href="#13-找出数组中出现次数最的元素，并给出其出现过的位置" class="headerlink" title="13 找出数组中出现次数最的元素，并给出其出现过的位置"></a>13 找出数组中出现次数最的元素，并给出其出现过的位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxAndIndex</span>(<span class="params"> arr </span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">        arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!obj[item])&#123;</div><div class="line">                obj[item]= &#123;<span class="attr">indexs</span>: [index]&#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obj[item][<span class="string">'indexs'</span>].push(index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> num=<span class="number">0</span>;<span class="comment">//记录出现次数最大值</span></div><div class="line">        <span class="keyword">var</span> str=<span class="string">''</span>;<span class="comment">//记录出现次数最多的字符</span></div><div class="line">        <span class="keyword">var</span> reArr;<span class="comment">//返回最大值的位置数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">var</span> temp=obj[attr][<span class="string">'indexs'</span>];</div><div class="line">            <span class="keyword">if</span>(temp.length&gt;num)&#123;</div><div class="line">                num=temp.length;</div><div class="line">                str=attr;</div><div class="line">                reArr=temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">maxStr</span>:str,</div><div class="line">            <span class="attr">indexs</span>:reArr</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>测试结果</strong><br><img src="/img/2016-03-26-12.png" alt="图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery中$()函数的7种用法汇总]]></title>
      <url>https://qianlongo.github.io/2016/03/26/jQuery%E4%B8%AD-%E5%87%BD%E6%95%B0%E7%9A%847%E7%A7%8D%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>jQuery对象是一个<strong>类数组</strong>的对象，含有连续的整形属性以及一系列的jQuery方法。它把所有的操作都包装在一个jQuery()函数中，形成了统一(也是惟一)的操作入口。<br>其中我们用的非常频繁的一个函数是$()或者说是jQuery()，当我们调用他的时候会根据传入的参数的不同而达到不同的效果。</p>
</blockquote>
<p>接下来会一一说一下这7中用法，欢迎大家指正其中不正确的地方。</p>
<a id="more"></a>
<h2 id="1-jQuery-selector-context"><a href="#1-jQuery-selector-context" class="headerlink" title="1 jQuery(selector,context)"></a>1 jQuery(selector,context)</h2><blockquote>
<p>简要的说是：接收一个css选择器表达式(selector)和可选的选择器上下文(context),返回一个包含了匹配的DOM元素的jQuery对象。</p>
</blockquote>
<p>默认情况下，对匹配元素的查找都是从<strong>根元素ducument对象</strong>开始，也就是说查找范围是整棵文档树。但是如果给定了上下文context，则在指定上下文中查找</p>
<p><strong>html</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;body span&lt;/span&gt;</div><div class="line">&lt;span&gt;body span&lt;/span&gt;</div><div class="line">&lt;span&gt;body span&lt;/span&gt;</div><div class="line">&lt;div class=&quot;wrap&quot;&gt;</div><div class="line">    &lt;span&gt;wrap span&lt;/span&gt;</div><div class="line">    &lt;span&gt;wrap span&lt;/span&gt;</div><div class="line">    &lt;span&gt;wrap span&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><strong>js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&apos;span&apos;).css(&apos;background-color&apos;,&apos;red&apos;);//所有的span都会变红</div><div class="line">$(&apos;span&apos;,&apos;.wrap&apos;).css(&apos;background-color&apos;,&apos;red&apos;);//只有.wrap中的span会变红</div></pre></td></tr></table></figure></p>
<h2 id="2-jQuery-html-ownerDocument-、jQuery-html-props"><a href="#2-jQuery-html-ownerDocument-、jQuery-html-props" class="headerlink" title="2 jQuery(html,ownerDocument) 、jQuery(html,props)"></a>2 jQuery(html,ownerDocument) 、jQuery(html,props)</h2><blockquote>
<p>用所提供的html代码创建DOM元素<br>对于jQuery(html,ownerDocument)，参数html可以是单标签或者是多层标签之间的嵌套。第二个参数用于创建新DOM元素的<strong>文档对象</strong>，如果不传入则默认为当前的文档对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//单标签  两种方式都可以往body中插入div</div><div class="line">/*</div><div class="line"> *   1  $(&apos;&lt;div&gt;&apos;).appendTo(&apos;body&apos;);</div><div class="line"> *   2  $(&apos;&lt;div&gt;&lt;/div&gt;&apos;).appendTo(&apos;body&apos;);</div><div class="line"> */</div><div class="line">// 多标签嵌套</div><div class="line"> $(&apos;&lt;div&gt;&lt;span&gt;dfsg&lt;/span&gt;&lt;/div&gt;&apos;).appendTo(&apos;body&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>另外:</strong>对于单标签，jQuery(html,props)，props是一个包含属性和事件的普通的对象，用法如下。(<strong>该用法有待考证，请知道这一用法的童鞋告知一下，感激不尽</strong>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(&apos;&lt;div&gt;我是div&lt;/div&gt;&apos;,&#123;</div><div class="line">    title:&apos;我是新的div&apos;,</div><div class="line">    click:function()&#123;</div><div class="line">        $(this).css(&apos;color&apos;,&apos;red&apos;);</div><div class="line">        console.log(this);</div><div class="line">    &#125;</div><div class="line">&#125;).appendTo(&apos;body&apos;);</div></pre></td></tr></table></figure>
<h2 id="3-jQuery-element-or-elementsArray"><a href="#3-jQuery-element-or-elementsArray" class="headerlink" title="3 jQuery(element or elementsArray)"></a>3 jQuery(element or elementsArray)</h2><blockquote>
<p>如果传入一个DOM元素或者是DOM元素的数组，则把DOM元素封装到jQuery对象中并返回。<br><strong>html</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;li&gt;4&lt;/li&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> // 传入DOM元素</div><div class="line"> $(&apos;li&apos;).each(function(index,ele)&#123;</div><div class="line">        $(ele).on(&apos;click&apos;,function()&#123;</div><div class="line">            $(this).css(&apos;background&apos;,&apos;red&apos;);//这里的DOM元素就是this</div><div class="line">        &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//传入DOM数组</div><div class="line">var aLi=document.getElementsByTagName(&apos;li&apos;);</div><div class="line">    aLi=[].slice.call(aLi);//集合转数组</div><div class="line">    var $aLi=$(aLi);</div><div class="line">    $aLi.html(&apos;我是jQuery对象&apos;);//所有的li的内容都变成&apos;我是jQuery对象&apos;</div></pre></td></tr></table></figure></p>
<h2 id="4-jQuery-object"><a href="#4-jQuery-object" class="headerlink" title="4 jQuery(object)"></a>4 jQuery(object)</h2><blockquote>
<p>如果传入的是一个object对象，则把该对象封装到jQuery对象中并返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;name:&apos;谦龙&apos;&#125;;</div><div class="line">var $obj=$(obj);//封装成jQuery对象</div><div class="line">//绑定自定义事件</div><div class="line">$obj.on(&apos;say&apos;,function()&#123;</div><div class="line">    console.log(this.name)//输出谦龙</div><div class="line">&#125;);</div><div class="line">$obj.trigger(&apos;say&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="5-jQuery-callback"><a href="#5-jQuery-callback" class="headerlink" title="5 jQuery(callback)"></a>5 jQuery(callback)</h2><blockquote>
<p>当传进去的参数是函数的时候，则在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">//以上代码和下面的效果是一样的</div><div class="line">$(document).ready(function()&#123;</div><div class="line">    ...//代码</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="6-jQuery-jQuery-object"><a href="#6-jQuery-jQuery-object" class="headerlink" title="6 jQuery(jQuery object)"></a>6 jQuery(jQuery object)</h2><blockquote>
<p>当传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入的jQuery对象引用完全相同的元素</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var aLi=$(&apos;li&apos;);</div><div class="line">var copyLi=$(aLi);//创建一个aLi的副本</div><div class="line">console.log(aLi);</div><div class="line">console.log(copyLi);</div><div class="line">console.log(copyLi===aLi);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-03-26-1.png" alt="jQuery"></p>
<h2 id="7-jQuery"><a href="#7-jQuery" class="headerlink" title="7 jQuery()"></a>7 jQuery()</h2><blockquote>
<p>如果不传入任何的参数，则返回一个空的jQuery对象，属性length为0<br>注意这个功能可以用来复用jQuery对象，例如可以创建一个空的jQuery对象，然后在需要的时候先手动修改其中的元素，然后在调用jQuery方法。从而避免重复创建jQuery对象。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tip 移动端子元素scroll，父元素不跟随滚动js实现]]></title>
      <url>https://qianlongo.github.io/2016/03/24/tip-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%90%E5%85%83%E7%B4%A0scroll%EF%BC%8C%E7%88%B6%E5%85%83%E7%B4%A0%E4%B8%8D%E8%B7%9F%E9%9A%8F%E6%BB%9A%E5%8A%A8js%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[用css美化你的浏览器滚动条]]></title>
      <url>https://qianlongo.github.io/2016/03/22/%E7%94%A8css%E7%BE%8E%E5%8C%96%E4%BD%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>总所周知，各大浏览器自带的滚动条样式在pc端比较单调无趣，爱美的童鞋也许不会喜欢这样的默认设置，有没有什么办法可以让我们随心所欲的定制属于自己的滚动条样式呢？好消息是<strong>有办法滴</strong>，但是还有一个坏消息，那就是到目前为止，几乎只有webkit内核的浏览器支持定制滚动条，其他浏览器要么完全不支持自定义，要么就是只支持自定义部分滚动条属性，所以本文暂时只谈怎么在webkit内核浏览器中修改滚动条</p>
</blockquote>
<a id="more"></a>
<h2 id="滚动条构造初体验"><a href="#滚动条构造初体验" class="headerlink" title="滚动条构造初体验"></a>滚动条构造初体验</h2><p>首先让我们来看一下滚动条大致由哪些部分组成，留图不留种，菊花万人捅，一图胜千言，请看下图。</p>
<p><img src="/img/2016-03-22-1.png" alt="困"></p>
<p><strong>构造说明</strong></p>
<ol>
<li>::-webkit-scrollbar        滚动条整体部分，其中的属性有width,height,background,border（就和一个块级元素一样）等。</li>
<li>::-webkit-scrollbar-button      滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>
<li>::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>
<li>::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。</li>
<li>::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分</li>
<li>::-webkit-scrollbar-corner               边角</li>
<li>::-webkit-resizer                       定义右下角拖动块的样式</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote>
<p>我们运用上面的伪类来修改webkit内核的滚动条，可以先预览一下一个简单的demo</p>
</blockquote>
<p><a href="http://runjs.cn/detail/esdf8ncr" target="_blank" rel="external">点击预览</a></p>
<p><strong>开始分析</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;inner&quot;&gt;</div><div class="line">    我是默认的滚动条</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;box demo&quot;&gt;</div><div class="line">  &lt;div class=&quot;inner&quot;&gt;</div><div class="line">    我是自定义的滚动条</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><strong>html</strong>的结构非常简单，就是为了演示例子准备的两个div滚动容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  width: 400px;</div><div class="line">  height: 400px;</div><div class="line">  border: solid 1px green;</div><div class="line">  float: left;</div><div class="line">  margin-right: 30px;</div><div class="line">  overflow: scroll;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.inner&#123;</div><div class="line">  height: 700px;</div><div class="line">  width: 700px;</div><div class="line">  font: 40px/400px &quot;微软雅黑&quot;;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*滚动条整体部分*/</div><div class="line">.demo::-webkit-scrollbar&#123;</div><div class="line">  width: 7px;</div><div class="line">  height: 7px;</div><div class="line">  border-radius: 4px;</div><div class="line">  background-color: #f0f0f0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*滚动条两端的箭头*/</div><div class="line">.demo::-webkit-scrollbar-button&#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*经测试好像并不能控制什么*/</div><div class="line">.demo::-webkit-scroll-track&#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*滚动条内侧部分 去掉*/</div><div class="line">.demo::-webkit-scrollbar-track-piece &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*滚动条中可以拖动的那部分*/</div><div class="line">.demo::-webkit-scrollbar-thumb&#123;</div><div class="line">  background-color: green;</div><div class="line">  border-radius: 4px;</div><div class="line">&#125;</div><div class="line">/*变角部分*/</div><div class="line">.demo::-webkit-scrollbar-corner &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line">.demo::-webkit-resizer&#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>最后得到效果如下图</strong>  图丑莫怪</p>
<p><img src="/img/2016-03-22-2.png" alt="困"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>虽然webkit内核浏览器允许我们自定义滚动条样式，但是这是不兼容的，其他浏览器下该是什么样子就是什么样子，所以想要滚动条一致性体验，还是用<strong>元素模拟</strong>的形式把，而且用css自定义样式的情况会产生一个新的问题，那就是会<strong>覆盖移动端下滚动条样式</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客搭建总结]]></title>
      <url>https://qianlongo.github.io/2016/03/06/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>一直想拥有一个自己独立的博客，在那里写自己的生活、感悟、学习积累和自己的心事…今天终于愿望成真了，博客初步搭建成型，而我也困成狗了。</p>
</blockquote>
<p><img src="/img/sleep.gif" alt="困"></p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[事件流详解]]></title>
      <url>https://qianlongo.github.io/2016/03/05/%E4%BA%8B%E4%BB%B6%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><strong>第一次</strong>在segmentfault写文章，希望通过这种方式来巩固所学的知识，也欢迎童鞋们指正其中有不对和错误的地方。^+^</p>
<ol>
<li><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2></li>
</ol>
<p><strong>事件流</strong>：页面中接收事件的顺序,即当一个事件发生时，该事件的传播过程便叫做事件流</p>
<h3 id="事件流的种类"><a href="#事件流的种类" class="headerlink" title="事件流的种类"></a>事件流的种类</h3><p>  <strong> 事件冒泡</strong></p>
<p>事件由最具体的元素开始<strong>逐级向上</strong>传播至较为不具体的节点(文档)</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;box&quot;&gt;点我&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>当我们点击id为box的div时，该点击事件传播顺序如下</p>
<p><strong>div –&gt; body –&gt; html –&gt;document</strong></p>
<p><strong>特别说明</strong>：IE5.5及更早的版本将绕过html节点直接到document，IE9，Firefox，chrome和safari将冒泡到window对象</p>
<p>   <strong>事件捕获</strong></p>
<p>事件捕获和事件冒泡似乎截然相反，由不太具体的节点先接收到事件 –&gt;再到最具体的节点。同样还是用上面冒泡例子，则事件的传播顺序则是：</p>
<p><strong>document –&gt; html –&gt;body –&gt;div</strong></p>
<p><strong>特别说明</strong>：ie8之前不支持事件捕获，IE9，safari，chrome，opera，firefox目前支持良好。并且这些浏览器不是从document开始捕获，而是从window对象开始。</p>
<h3 id="DOM事件流阶段"><a href="#DOM事件流阶段" class="headerlink" title="DOM事件流阶段"></a>DOM事件流阶段</h3><ol>
<li>捕获阶段</li>
<li>目标阶段</li>
<li>冒泡阶段</li>
</ol>
<p><img src="/img/sjl.png" alt="事件流图解"></p>
<p>以上面的代码为例子，由图可以很清晰地看出首先发生的是<strong>事件捕获</strong>–&gt;实际的目标接收事件–&gt;事件冒泡</p>
<p><strong>特别说明</strong>:在DOM事件流中，实际的目标不会在捕获阶段接收到事件，即捕获阶段到body就停止，”下一阶段”是目标阶段，该阶段可以看成是事件冒泡的一部分，最终事件又被传播会document。<br><strong>BUT</strong> :我们的各大浏览器总是不喜欢按照规范来，IE9，Safari，chrome，firefox及其更高的版本中都会在捕获阶段出发事件对象上的事件，最后导致有两个机会在目标对象上操作事件。</p>
<ol>
<li>##事件处理程序<br><strong>事件</strong>：用户或者浏览器自身执行的某个动作，比如load，click，mousemove等<br><strong>事件处理程序</strong>：相应某个事件的函数叫做事件处理函数（也叫做<strong>事件侦听器</strong>）<h3 id="事件处理程序类别"><a href="#事件处理程序类别" class="headerlink" title="事件处理程序类别"></a>事件处理程序类别</h3><strong>1 html事件处理程序</strong>：某个元素支持的某个事件可以用与事件处理程序同名的html特性来指定，该特性的值是能够执行的javascript代码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; onclick=&quot;alert(&apos;我被点击了&apos;)&quot; /&gt;</div><div class="line"></div><div class="line">/*</div><div class="line">   当点击该按钮的时候，浏览器会弹出&apos;我被点击了&apos;;</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当然也可以给<strong>onclick</strong>赋值页面中其他地方定义的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function show()&#123;</div><div class="line">        alert(&apos;我被点击了&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">/*</div><div class="line">  点击后也会弹出 &apos;我被点击了&apos;</div><div class="line">*/</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; onclick=&quot;show()&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：简单明了，省去获取元素等一系列前提操作<br><strong>缺点</strong>：html代码与js代码高度耦合，不符合分离原则</p>
<hr>
<p><strong>2 DOM0级别事件处理函数</strong>：使用 element.on[eventname]=fn的方式给元素添加事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;click&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var oBtn=document.getElementById(&apos;click&apos;);</div><div class="line">        //该方式被认为是元素的方法，即事件处理程序在元素的作用域中进行，this即该元素本身</div><div class="line">        oBtn.onclick=function()&#123;</div><div class="line">            alert(this.id);//click</div><div class="line">        &#125;</div><div class="line">        //注意：删除该事件处理程序可以用如下方法</div><div class="line">        oBtn.onclick=null;//即点击后不再有任何反应</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>3 DOM2级事件处理程序</strong>：DOM2级添加了addEventListener（添加事件处理程序）和removeEventListener(移除事件处理程序)<br><strong>添加事件处理函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;click&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var oBtn=document.getElementById(&apos;click&apos;);</div><div class="line">        /* 参数1 指定事件名称...click mouseover mouseout</div><div class="line">           参数2 事件处理程序（匿名函数或者有名函数）</div><div class="line">           参数3 true（捕获阶段发生） or false（冒泡阶段发生）</div><div class="line">        */</div><div class="line">        oBtn.addEventListener(&apos;click&apos;,function()&#123;</div><div class="line">            alert(this.id)//click  this指的是该元素作用域内</div><div class="line">        &#125;,false)</div><div class="line">        //注意该种方式可以给一个函数添加多个事件处理函数，执行顺序与添加顺序相同</div><div class="line">        oBtn.addEventListener(&apos;click&apos;,function()&#123;</div><div class="line">            alert(&apos;Hello World&apos;)//click</div><div class="line">        &#125;,false)</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><strong>移除事件处理函数</strong>：如果事件处理函数是有名函数，则可以通过名字来移除，匿名函数无法移除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;click&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line"> var oBtn=document.getElementById(&apos;click&apos;);</div><div class="line">        function showId()&#123;</div><div class="line">            alert(this.id);</div><div class="line">        &#125;;</div><div class="line">        function HellowWorld()&#123;</div><div class="line">            alert(&apos;HellowWorld&apos;);</div><div class="line">        &#125;</div><div class="line">        oBtn.removeEventListener(&apos;click&apos;,showId,false)</div><div class="line">        //最后只能弹出HellowWorld</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><strong>4IE事件处理程序</strong>：ie实现了与dom类似的两个方法，attachEvent（添加），detachEvent（删除）<br><strong>添加事件处理函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;click&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var oBtn=document.getElementById(&apos;click&apos;);</div><div class="line">            function showId()&#123;</div><div class="line">                alert(this.id);</div><div class="line">            &#125;;</div><div class="line">        oBtn.attachEvent(&apos;onclick&apos;,showId);//这时候会报错，因为这里的是在window</div><div class="line">        的作用域内</div><div class="line">        //修改如下</div><div class="line">        oBtn.attachEvent(&apos;onclick&apos;,function()&#123;</div><div class="line">            showId.call(this);//改变this指向</div><div class="line">        &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><strong>删除事件处理函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;click&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var oBtn=document.getElementById(&apos;click&apos;);</div><div class="line">            function showId()&#123;</div><div class="line">                alert(&apos;HelloWorld&apos;);</div><div class="line">            &#125;;</div><div class="line">        oBtn.attachEvent(&apos;onclick&apos;,showId);//这时候会报错，因为这里的是在window</div><div class="line">        的作用域内</div><div class="line">        //修改如下</div><div class="line">        oBtn.detachEvent(&apos;onclick&apos;,showId) ;//点击没有任何反应</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="事件函数封装"><a href="#事件函数封装" class="headerlink" title="事件函数封装"></a>事件函数封装</h3><p><strong>绑定</strong> 为了解决attachEvent的this指向问题，并且可以通过有名称的函数来解除事件绑定，现在处理如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">   function bind(obj,eventName,fn)&#123;</div><div class="line">        var _fn=fn;</div><div class="line">        fn=function()&#123;</div><div class="line">            _fn.call(obj);//改变this指向</div><div class="line">        &#125;;</div><div class="line">        if(obj.addEventListener)&#123;</div><div class="line">            obj.addEventListener(eventName,fn,false);</div><div class="line">        &#125;else&#123;</div><div class="line">            obj.attachEvent(&apos;on&apos;+eventName,fn);</div><div class="line">        &#125;</div><div class="line">        return fn;//用于事件解除</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>解除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> function unbind(obj,eventName,fn)&#123;</div><div class="line">    if(obj.removeEventListener)&#123;</div><div class="line">        obj.removeEventListener(eventName,fn);</div><div class="line">    &#125;else&#123;</div><div class="line">        obj.detachEvent(&apos;on&apos;+eventName,fn);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>使用方式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//给input添加和移除事件</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;box&quot; value=&quot;事件封装&quot; /&gt;</div><div class="line">//添加</div><div class="line">function show( )&#123;</div><div class="line">    alert(this);</div><div class="line">&#125;</div><div class="line">function show2( )&#123;</div><div class="line">    alert(this.id);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var removeFn=bind(&apos;box&apos;,&apos;click&apos;,show);//需要移除的事件处理程序，不是原程序名称show</div><div class="line">bind(&apos;box&apos;,&apos;click&apos;,show2);</div><div class="line">unbind(&apos;box&apos;,&apos;click&apos;,removeFn);</div><div class="line">//最后只会弹出 box</div></pre></td></tr></table></figure>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><blockquote>
<p>当触发DOM上面的某个事件的时候，会产生一个事件对象event,这个对象中包含着所有与事件对象有关的信息。例如该<strong>事件类型</strong>，<strong>导致事件的元素</strong>等</p>
</blockquote>
<h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><blockquote>
<p>   <strong>DOM中的事件对象</strong>：兼容DOM的浏览器会将event对象传入到事件处理程序中，无论指定事件处理程序用什么方式(html方式，DOM0级方式，DOM2级方式)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> &lt;input type=&quot;button&quot; id=&quot;box&quot; value=&quot;DOM中的事件对象&quot; onclick=&quot;console.log(event.type)&quot;&gt;</div><div class="line"> //html方法  click</div><div class="line">var oBox=document.getElementById(&apos;box&apos;);</div><div class="line"> //DOM0级别方法 click</div><div class="line">     oBox.onclick=function(ev)&#123;</div><div class="line">         console.log(ev.type);//click</div><div class="line">     &#125;</div><div class="line"> ///DOM2级别方法 click</div><div class="line"> oBox.addEventListener(&apos;click&apos;,function(ev)&#123;</div><div class="line">         console.log(ev.type);//click</div><div class="line">     &#125;)</div></pre></td></tr></table></figure>
<p><strong>总的来说event对象包含与创建他的特定事件有关的属性和方法，但是触发的事件类型不同，则可用的属性和方法也不一样。但是都会包含以下成员</strong></p>
<table>
<thead>
<tr>
<th>属性/方法</th>
<th style="text-align:center">类型</th>
<th style="text-align:right">读/写</th>
<th></th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>currentTarget</td>
<td style="text-align:center">element</td>
<td style="text-align:right">只读</td>
<td></td>
<td>事件处理程序当前正在处理程序的那个元素，我的理解是事件的直接绑定者</td>
</tr>
<tr>
<td>target</td>
<td style="text-align:center">element</td>
<td style="text-align:right">只读</td>
<td></td>
<td>事件的目标</td>
</tr>
<tr>
<td>cancelable</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>表示是否可以取消事件的默认行为</td>
</tr>
<tr>
<td>preventDefault()</td>
<td style="text-align:center">function</td>
<td style="text-align:right">只读</td>
<td></td>
<td>取消事件的默认行为 ,前提是cancelable为true</td>
</tr>
<tr>
<td>bubbles</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>表明事件是否可以冒泡</td>
</tr>
<tr>
<td>stopPropagation()</td>
<td style="text-align:center">function</td>
<td style="text-align:right">只读</td>
<td></td>
<td>取消事件的进一步冒泡或者捕获，前提是bubbles为true</td>
</tr>
<tr>
<td>type</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>事件类型</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:center">abstractView</td>
<td style="text-align:right">只读</td>
<td></td>
<td>与事件关联的抽象视图，等同于发生事件的window对象</td>
</tr>
<tr>
<td>detail</td>
<td style="text-align:center">integer</td>
<td style="text-align:right">只读</td>
<td></td>
<td>与事件相关的细节信息</td>
</tr>
<tr>
<td>eventPhase</td>
<td style="text-align:center">integer</td>
<td style="text-align:right">只读</td>
<td></td>
<td>调用事件处理程序的阶段，1：:捕获，2：“处于目标”，3：冒泡</td>
</tr>
<tr>
<td>trusted</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>为true表示事件是由浏览器生成的，为false表示事件是由开发人员通过js生成的。(DOM3)</td>
</tr>
<tr>
<td>stopImmediatePropagation()</td>
<td style="text-align:center">function</td>
<td style="text-align:right">只读</td>
<td></td>
<td>取消事件的进一步捕获或者冒泡，同时阻止任何事件处理程序被调用(DOM3)</td>
</tr>
</tbody>
</table>
<p><strong>特别说明</strong>：只有在事件处理程序被执行的期间，event对象才会存在，一旦事件处理程序执行完成，其就会被销毁。</p>
<h3 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h3><blockquote>
<p>与访问DOM中的事件对象不同，要访问IE中的event对象有几种不同的方式。取决于指定事件处理程序的方法。</p>
</blockquote>
<ol>
<li>html event</li>
<li>函数参数</li>
<li>window.event</li>
</ol>
<p><strong>同样IE中的event对象也包含着与创建他的事件相关的属性和方法，其中很多的属性和方法都有对应的或者是相关的DOM属性和方法。当然也会事件的不同，其属性和方法也会有所不同，但是都会包含下表内容</strong></p>
<table>
<thead>
<tr>
<th>属性/方法</th>
<th style="text-align:center">类型</th>
<th style="text-align:right">读/写</th>
<th></th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>srcElement</td>
<td style="text-align:center">element</td>
<td style="text-align:right">只读</td>
<td></td>
<td>事件的目标（与DOM中的target属性相同）</td>
</tr>
<tr>
<td>type</td>
<td style="text-align:center">string</td>
<td style="text-align:right">只读</td>
<td></td>
<td>事件的类型</td>
</tr>
<tr>
<td>cancelBubble</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>默认为false，设置为true表示取消冒泡(与stopPropagation()作用相同)</td>
</tr>
<tr>
<td>returnValue</td>
<td style="text-align:center">boolean</td>
<td style="text-align:right">只读</td>
<td></td>
<td>默认为true，设置为false就可以取消默认行为（与preventDefault()作用相同）</td>
</tr>
</tbody>
</table>
<h3 id="跨浏览器事件对象封装"><a href="#跨浏览器事件对象封装" class="headerlink" title="跨浏览器事件对象封装"></a>跨浏览器事件对象封装</h3><p>我们为eventUtil添加几个方法，以此来达到有关event对象的常用的跨浏览器的使用目标</p>
<ol>
<li>getEvent() 获取事件对象</li>
<li>getTarget()获取事件源</li>
<li>stopPropagation() 取消冒泡</li>
<li>preventDefault() 阻止默认行为</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var eventUtil=&#123;</div><div class="line">     getEvent:function(ev)&#123;</div><div class="line">         return ev || window.event;//获取事件对象</div><div class="line">     &#125;,</div><div class="line">     getTarget:function(ev)&#123;</div><div class="line">         return ev.target || ev.srcElement;//获取事件源</div><div class="line">     &#125;,</div><div class="line">     stopPropagation:function(ev)&#123;//阻止冒泡</div><div class="line">         if(ev.stopPropagation)&#123;</div><div class="line">             ev.stopPropagation();</div><div class="line">         &#125;else&#123;</div><div class="line">             ev.cancelBubble=true;</div><div class="line">         &#125;</div><div class="line">     &#125;,</div><div class="line">     preventDefault:function(ev)&#123;//阻止默认行为</div><div class="line">         if(ev.preventDefault)&#123;</div><div class="line">             ev.preventDefault();</div><div class="line">         &#125;else&#123;</div><div class="line">             ev.returnValue=true;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="常见应用之事件委托"><a href="#常见应用之事件委托" class="headerlink" title="常见应用之事件委托"></a>常见应用之事件委托</h3><p><strong>说明</strong>：需要给页面中成百上千个li绑定一个事件并且输出当前元素的innerHTML<br><strong>常见做法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;li&gt;4&lt;/li&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">    &lt;li&gt;6&lt;/li&gt;</div><div class="line">    &lt;li&gt;7&lt;/li&gt;</div><div class="line">    &lt;li&gt;8&lt;/li&gt;</div><div class="line">    &lt;li&gt;9&lt;/li&gt;</div><div class="line">    &lt;li&gt;10&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">var aLi  //假设已经获取了这组li元素</div><div class="line">for(var i=0;i&lt;aLi.length;i++)&#123;</div><div class="line">    aLi[i].onclick=function(ev)&#123;</div><div class="line">        console.log(this.innerHTML);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式通过遍历DOM节点的方式添加事件处理程序有诸多缺点，比如性能大大减低，新添加的li不具备click事件等。</p>
<p><strong>利用事件委托（冒泡原理）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var oUl//假设oUl是li的父节点</div><div class="line">oUL.onclick=fuction(ev)&#123;</div><div class="line">    var ev=eventUtil.getEvent(ev);</div><div class="line">    var target=eventUtil.getTarget(ev);</div><div class="line">        console.log(target.innerHTML);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>利用事件委托可以大大地提高性能，后面随时添加的元素都可以拥有这个点击事件等</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js面向对象继承浅析]]></title>
      <url>https://qianlongo.github.io/2016/03/05/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%B5%85%E6%9E%90--%E7%BB%A7%E6%89%BF%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>js中实现继承的方式只支持<strong>实现继承</strong>，即继承实际的方法，而实现继承主要是依靠<strong>原型链</strong>来完成的。</p>
</blockquote>
<h2 id="原型链式继承"><a href="#原型链式继承" class="headerlink" title="原型链式继承"></a>原型链式继承</h2><blockquote>
<p>该方式实现的本质是重写原型对象，代之以一个<strong>新类型的实例</strong>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;</div><div class="line">    this.property=true;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue=function()&#123;</div><div class="line">    return this.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function SubType()&#123;</div><div class="line">    this.subproperty=false;</div><div class="line">&#125;</div><div class="line">SubType.prototype = new SuperType();//继承</div><div class="line">SubType.prototype.getSubValue=function()&#123;//额外添加方法</div><div class="line">    return this.subproperty;</div><div class="line">&#125;</div><div class="line">var s = new SubType();</div><div class="line">    console.log(s.getSubValue());//false</div><div class="line">    console.log(s.getSuperValue());//true</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>借用纯原型链的问题：</strong>如果原型中包含引用类型的值，则实例间对该值的修改会相互影响，这不是我们希望看到的。</p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><blockquote>
<p>该方式的基本思想是在<strong>子类型</strong>的构造函数的内部调用超类型构造函数(父函数)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;</div><div class="line">     this.color=[&apos;green&apos;,&apos;red&apos;,&apos;black&apos;];</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> function SubType()&#123;</div><div class="line">     SuperType.call(this)//改变执行环境 实现继承</div><div class="line"> &#125;</div><div class="line"> var  s = new SubType();</div><div class="line">     s.color.push(&apos;pink&apos;);</div><div class="line">     console.log(s.color);//[ &apos;green&apos;, &apos;red&apos;, &apos;black&apos;, &apos;pink&apos; ]</div><div class="line"> var s1 = new SubType();</div><div class="line">     console.log(s1.color);//[ &apos;green&apos;, &apos;red&apos;, &apos;black&apos; ]</div></pre></td></tr></table></figure>
<p><strong>构造函数的问题：</strong>方法都在构造函数内部定义，则函数复用无从谈起。</p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><blockquote>
<p>基本思路是使用原型链来实现对原型属性和方法的继承，通过构造函数实现实例属性的继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function SuperType(name)&#123;</div><div class="line">       this.name=name;</div><div class="line">       this.color=[&apos;green&apos;,&apos;red&apos;,&apos;black&apos;];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   SuperType.prototype.show=function()&#123;</div><div class="line">       console.log(this.name,this.color);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   function SubType(name,age)&#123;</div><div class="line">       SuperType.call(this,name)//改变执行环境 实现实例属性继承</div><div class="line">       this.age=age;</div><div class="line">   &#125;</div><div class="line">   SubType.prototype = new SuperType();//原型属性和方法继承</div><div class="line"></div><div class="line">   var s = new SubType(&apos;谦龙&apos;,100);</div><div class="line">       s.show();//谦龙 [&quot;green&quot;, &quot;red&quot;, &quot;black&quot;]</div><div class="line">   var s = new SubType(&apos;雏田&apos;,14);</div><div class="line">   s.show();//雏田 [&quot;green&quot;, &quot;red&quot;, &quot;black&quot;]</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><blockquote>
<p>该方法的特点是借助原型可以基于一个已有的对象创建新的对象，同时还不比因此创建自定义类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function object(obj)&#123;</div><div class="line">    function F()&#123;&#125;;</div><div class="line">    F.prototype=obj;</div><div class="line">    //F.prototype.constructor=F; 有需要还可以修改constructor指向</div><div class="line">    return new F();</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person=&#123;</div><div class="line">    name:&apos;谦龙&apos;,</div><div class="line">    color:[&apos;red&apos;,&apos;green&apos;,&apos;black&apos;]</div><div class="line">&#125;</div><div class="line">var p1 = object(person);</div><div class="line">    p1.color.push(&apos;pink&apos;);</div><div class="line"></div><div class="line">var p2 = object(person);</div><div class="line">p2.color.push(&apos;grey&apos;);</div><div class="line"></div><div class="line">console.log(person.color);//[&quot;red&quot;, &quot;green&quot;, &quot;black&quot;, &quot;pink&quot;, &quot;grey&quot;]</div></pre></td></tr></table></figure>
<p><strong>ES5中的Object.creat()与该方式的行为相同</strong></p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><blockquote>
<p>该方式的思路是创建一个仅用来封装继承过程的函数，该函数在内部以某种方式来增强对象，最后将该对象返回。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function object(obj)&#123;</div><div class="line">       function F()&#123;&#125;;</div><div class="line">       F.prototype=obj;</div><div class="line">       //F.prototype.constructor=F; 有需要还可以修改constructor指向</div><div class="line">       return new F();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   function CObject(obj)&#123;</div><div class="line">       var clone=object(obj);</div><div class="line">       clone.sayHi=function()&#123;</div><div class="line">           alert(&apos;HI&apos;);</div><div class="line">       &#125;</div><div class="line">       return clone;</div><div class="line">   &#125;</div><div class="line">   var person=&#123;</div><div class="line">       name:&apos;谦龙&apos;,</div><div class="line">       color:[&apos;red&apos;,&apos;green&apos;,&apos;black&apos;]</div><div class="line">   &#125;</div><div class="line">   var s = CObject(person);</div><div class="line">       s.sayHi();</div></pre></td></tr></table></figure>
<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><blockquote>
<p>思路是通过借用构造函数来继承属性，通过原型链的混合形式来继承方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function SuperType(name)&#123;</div><div class="line">    this.name=name;</div><div class="line">    this.color=[&apos;green&apos;,&apos;red&apos;,&apos;black&apos;];</div><div class="line">&#125;</div><div class="line">SuperType.prototype.show=function()&#123;</div><div class="line">    console.log(this.name,this.color);</div><div class="line">&#125;</div><div class="line">function SubType(name,age)&#123;</div><div class="line">    SuperType.call(this,name)//改变执行环境 实现继承</div><div class="line">    this.age=age;</div><div class="line">&#125;</div><div class="line">function object(obj)&#123;</div><div class="line">    function F()&#123;&#125;;</div><div class="line">    F.prototype=obj;</div><div class="line">    //F.prototype.constructor=F; 有需要还可以修改constructor指向</div><div class="line">    return new F();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function inheritPrototype(subType,superType)&#123;</div><div class="line">    var prototype=object(superType.prototype);</div><div class="line">    prototype.constructor=subType;</div><div class="line">    subType.prototype=prototype;</div><div class="line">&#125;</div><div class="line">inheritPrototype(SubType,SuperType);</div><div class="line">var s = new SubType(&apos;谦龙&apos;,100);</div><div class="line">s.show();//谦龙 [&quot;green&quot;, &quot;red&quot;, &quot;black&quot;]</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><blockquote>
<p>该方法思路是将另外一个对象的属性和方法拷贝至另一个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function deepCopy(obj)&#123;</div><div class="line">           if(typeof obj !=&apos;object&apos;)&#123;</div><div class="line">               console.trace();</div><div class="line">               return obj;</div><div class="line">           &#125;</div><div class="line">           var newObj=&#123;&#125;;</div><div class="line">               for(var attr in obj)&#123;</div><div class="line">                   newObj[attr]=typeof obj[attr]==&apos;object&apos;?deepCopy(obj[attr]):obj[attr];//使用递归</div><div class="line">               &#125;</div><div class="line">           return newObj;</div><div class="line">       &#125;</div><div class="line">       var obj=&#123;</div><div class="line">           name:&apos;min&apos;,</div><div class="line">           age:20,</div><div class="line">           sex:&apos;boy&apos;,</div><div class="line">           json:&#123;</div><div class="line">               name2:&apos;huihui&apos;,</div><div class="line">               json3:&#123;</div><div class="line">                   name3:&apos;yahui&apos;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       var newObj=deepCopy(obj);</div><div class="line">       console.log(newObj);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/img/extend.png" alt="图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实习月总结]]></title>
      <url>https://qianlongo.github.io/2016/03/05/%E5%AE%9E%E4%B9%A0%E6%9C%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>时间似流水般潺潺而过，不经意便从指尖溜走，于笔尖划过。悄然无声，却迹痕般般。投江至今足月有余，恍然恰似昨日，梦醒犹如初见。席地而坐，所思？所获？何为？…</p>
</blockquote>
<h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><blockquote>
<p>投江近一个月，切身体会这里的人、事、景、物。30多个小伙伴组成了和睦有爱的前端大家庭，他们身怀过硬的技术专长，对工作用心务实，待新人耐心和善，领导没有高架子，与”平民”同乐，他们日出而”作”,日落而归，没有夜夜加班的bat文化，没有尔虞我诈的勾心斗角，在这里自己开心快乐，充实而饱满。</p>
</blockquote>
<a id="more"></a>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li><strong>熟悉和实践移动端相关技术</strong><br>移动端在web开发中所占的地位不断加重，前端开发不了解其相关技术势必被浪潮拍在<br>沙滩上。</li>
<li><strong>在工作中锻炼技术，提高解决问题和独立学习的能力</strong></li>
</ol>
<h2 id="所获"><a href="#所获" class="headerlink" title="所获"></a>所获</h2><h3 id="主动思考"><a href="#主动思考" class="headerlink" title="主动思考"></a>主动思考</h3><blockquote>
<p>实习收获最大的一件事情就是学会主动思考，主动去思考需求本身是否合理，去思考如何做才能使体验更佳…</p>
</blockquote>
<p>mmp项目中有一个模块用来专门做渠道管理，使应用可以关联相应的渠道，但是产品给出的原型中应用却有一套自己独立的添加渠道操作，该渠道并不是从前面维护的渠道中选出，于是和产品沟通，如果这样渠道管理就失去了维护的意义，后来产品更改需求，交互原型也变成如下图</p>
<p><img src="/img/mmpSource.png" alt="图片描述"></p>
<p><img src="/img/mmpLater.png" alt="图片描述"></p>
<h3 id="前端无需了解需求本身？"><a href="#前端无需了解需求本身？" class="headerlink" title="前端无需了解需求本身？"></a>前端无需了解需求本身？</h3><blockquote>
<p>在之前的一段实习过程中，经常有合作的后端同学说前端无需了解需求本身，但是我觉得这样的看法是不对的。</p>
<p><strong>抛开码农的世界</strong>，无论身处何处，在做什么，首先<strong>知道自己做的是什么</strong>是非常重要的事情，如果只是按部就班的把被安排的事情做好,这与行尸走肉无异，于己而言也就没有什么意义了。</p>
<p><strong>回归码农的世界</strong>，前端除了了解产品界面原型和ui效果图，还应当了解产品的功能需求和业务规则。很多时候，在没有设计或者交互参与的项目中，产品对界面的把控并没有前端仔细，而且在一些交互细节上也无法做到体验最佳。如果前端不去了解业务需求，而只是按照原型将页面实现，那做出来的东西一定不是”更好的”。</p>
</blockquote>
<h3 id="关于编码习惯"><a href="#关于编码习惯" class="headerlink" title="关于编码习惯"></a>关于编码习惯</h3><p>好的编码习惯可以提高我们的代码质量，增强团规开发协作效，减少bug出现的几率…<br>甚至可以提高自己对曾经写过的代码的理解力(时间一长，如果编码习惯不好，哪怕是自己写的程序，恐怕也不能快速理解)</p>
<blockquote>
<p>与其说师兄有代码洁癖，强迫症，还不如说他养成了良好的编程习惯，有时候他在看自己写的代码的时候，经常会指出一些编程习惯的问题比如</p>
</blockquote>
<ol>
<li>保持分号统一，不要一处有，一处没有</li>
<li>写if while等的时候空一格，这有利于和函数调用区分开</li>
<li>使用两个空格来缩进，这是保证在各大平台上代码缩进都统一办法</li>
<li>将调试以及当前使用但未来需要删除的代码做上标记xxx方便以后将其删除<br>(经常我们的习惯是用console.log等来进行调试，但是调试完成之后使用//注释掉，很有可能在代码上线之前没有将其删除)</li>
<li>做好注释，比如在路由那一块，哪一个模板对应什么业务应该有清晰明显的注释，方便自己和后面维护的童鞋一目了然的知晓其作用。</li>
<li>…<blockquote>
<p>好习惯的养成不是一朝一夕的事情，而是长时间的积累和坚持，现在自己写程序依然会有各种问题存在，这也说明习惯养成之路漫长且待坚持。</p>
</blockquote>
</li>
</ol>
<h3 id="扩展和可配置"><a href="#扩展和可配置" class="headerlink" title="扩展和可配置"></a>扩展和可配置</h3><blockquote>
<p>代码的扩展性是码农都追求的一个目标，我所理解的代码的扩展性一方面是为了应对或者解决需求的时常变更而给开发者带来比较大的开发代价而做的程序设计。</p>
</blockquote>
<p>比如有这么一个常见的导航模块，包含三大板块，每个板块下面会有自己的小模块</p>
<p><img src="/img/mmpNav.png" alt="图片描述"></p>
<p>刚开始做的时候是根据原型完全用<strong>写死的方式在html写好</strong>，但是后来和产品了解需求的时候发现这个项目并没有最后完全敲锤定音，也就是还存在许多可变因素，导航模块完全有可能增加和删除，为了解决这样的问题，我将原先先死的html结构抽象出来，将大模块标题，小模块，图标用数据配置的方式来生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$scope.groups = [</div><div class="line">    &#123;</div><div class="line">      title : &apos;应用管理&apos;,//标题</div><div class="line">      icon : &apos;glyphicon glyphicon-th-list&apos;,//图标</div><div class="line">      isOpen : true,//是否展开</div><div class="line">      lists : [//子模块</div><div class="line">        &#123;</div><div class="line">          title : &apos;应用列表&apos;,</div><div class="line">          ui_sref : &apos;application_list&apos;,</div><div class="line">          icons : &apos;glyphicon glyphicon-paperclip&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          title : &apos;渠道管理&apos;,</div><div class="line">          ui_sref : &apos;channel_management&apos;,</div><div class="line">          icons : &apos;glyphicon glyphicon-paperclip&apos;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ];</div></pre></td></tr></table></figure></p>
<p>再配合这一段模板就可以解决后续模块增加或者删除的问题(只需要在数据模型中增加或者删除对应的字段就可以)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;uib-accordion&gt;</div><div class="line">    &lt;uib-accordion-group  is-open=&quot;group.isOpen&quot; ng-repeat=&quot;group in groups&quot;&gt;</div><div class="line">      &lt;uib-accordion-heading&gt;</div><div class="line">        &#123;&#123; group.title &#125;&#125;  &lt;i class=&quot;&#123;&#123; group.icon &#125;&#125;&quot;&gt;&lt;/i&gt;&lt;span ng-class=&quot;&#123;&apos;triangle&apos;: group.isOpen,&apos;triangle_no&apos;:!group.isOpen&#125;&quot;&gt;&lt;/span&gt;</div><div class="line">      &lt;/uib-accordion-heading&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li ng-repeat=&quot;item in group.lists&quot; ng-click=&quot;tab.setCurrent(&apos;application_list&apos;)&quot;&gt;</div><div class="line">          &lt;a ui-sref=&quot;.&#123;&#123; item.ui_sref &#125;&#125;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;</div><div class="line">          &lt;i class=&quot;&#123;&#123; item.icons &#125;&#125;&quot;&gt;&lt;/i&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/uib-accordion-group&gt;</div><div class="line">  &lt;/uib-accordion&gt;</div></pre></td></tr></table></figure></p>
<h3 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h3><ol>
<li>angular初级开发，可以利用angular提供的特性完成初步的web开发</li>
<li>移动端入门、了解移动端相关知识熟悉flex布局</li>
<li>gulp知识入门，可以编写常见的gulp代码来处理我们的任务</li>
</ol>
<h2 id="计划未完成"><a href="#计划未完成" class="headerlink" title="计划未完成"></a>计划未完成</h2><h3 id="qDrap组件开发"><a href="#qDrap组件开发" class="headerlink" title="qDrap组件开发"></a>qDrap组件开发</h3><p>产生要写这个组件的初始原因是刚来到这里的时候写了一个拖拽排序小组件<a href="https://github.com/qianlongGo/components/blob/master/DragToSort/js/dragToSort.js" target="_blank" rel="external">拖拽排序</a>师兄看了之后提了许多建议</p>
<ol>
<li>在进行碰撞检测的时候无需将所有的元素都检测一遍，只需要将即将可能发生碰撞的元素进行检测即可( 当然前提是需要判断哪些元素可能会与当前元素发生碰撞)</li>
<li>有些行为应该做成可配置，比如拖拽时的动画</li>
<li>组件开发应该尽量满足和契合其他规范，比如amd、cmd</li>
</ol>
<p>后来在mmp需求来了之后，把工作重心都放在mmp上，没有完成这一计划….<br><strong>做事当有始有终，不可以半途而废</strong></p>
<h3 id="mmp项目前端工作未达到预期"><a href="#mmp项目前端工作未达到预期" class="headerlink" title="mmp项目前端工作未达到预期"></a>mmp项目前端工作未达到预期</h3><p>mmp项目期望是年前上线，排除一些前端不可控因素( 比如后端数据接口在29号才部分走通，所提供的数据联调机器在28号才给到… )从自己身上找原因</p>
<ol>
<li>该项目时间绝对够，快20天的时间前端只完成2/3界面编写与逻辑交互，而且现在还没有经过测试。原因何在？虽说自己设计界面从未有过涉及是一个挑战，但是变化是唯一不变的变化，不可能任何时候都让自己做自己熟悉的事情，所以面对这种情况自己花费了比较多的时间去适应，适应能力差。</li>
<li>没有把控好时间节点，页面编写花费时间太多近2周，这是不是从侧面说明一个问题，前端基础知识css布局有待加强。</li>
</ol>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ol>
<li><p>不能很好地分配时间，安排工作节点实际工作中对需求的评估并给出相应的完成时间节点是非常重要的一件事情,一方面节点的给出有利于其他童鞋知晓你的工作进度，以方便协调合作，一方面也让自己的时间得到有效的利用，但是在实习过程中自己明显表现出计划不合理，工作效率低的问题，说到底还是不懂的合理有效地安排时间</p>
</li>
<li><p>沟通表达问题团队协作离不开密切地沟通，不同角色之间如何沟通是一个学问。如何用通俗有效的语言与非技术或不懂自己从事的技术与他人沟通，让他人明白我在说什么？这方面自己非常欠缺</p>
</li>
<li><p>知识面宅前端开发的基础知识上还不够具体和全面， “面”很狭窄。需要多加学习和拓展。</p>
</li>
<li><p>“主动性”做的还不够主动思考，主动与伙伴交流，主动承担更多的责任，觉得项目中或生活中不合理的地方，要学会主动去推动他，不能依靠或等待别人来做( 比如在用后端给的数据接口的时候好些接口对前端是不够友好的，甚至于业务而言真的是错误的，刚开始并没有主动去找后端童鞋说清楚缘由，而是觉得后端童鞋自己应该会发觉问题所在 )</p>
</li>
<li><p>前端不懂设计<br>mmp项目实施过程中没有设计和交互的参与，界面需要自己来进行设计，如何搭配颜色，如何布局展示，怎样交互才更加合理，是一次挑战，实践过程中也发现自己缺乏这方面的知识和能力，之前做的东西大多数也是别人设计好的东西。</p>
</li>
</ol>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>感谢这一段实习经历，遇见一个好的团队，里面每个人都是你的师傅，他们热情耐心，毫无距离感。在这里，自己开心快乐，每天都可以学到新的东西，幸福ing。针对这些不足和问题需要一步步改正加强。兄弟们！！！待来年，从头聚。</p>
]]></content>
    </entry>
    
  
  
</search>
